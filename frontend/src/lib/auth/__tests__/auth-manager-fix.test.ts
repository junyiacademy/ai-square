import { AuthManager } from '../auth-manager';
import crypto from 'crypto';

describe('AuthManager Fixed Implementation', () => {
  describe('isValidSessionToken', () => {
    it('should validate 64-character hex tokens', () => {
      // Standard token generation used in login/register
      const validToken = crypto.randomBytes(32).toString('hex');
      
      expect(AuthManager.isValidSessionToken(validToken)).toBe(true);
    });

    it('should validate various valid hex tokens', () => {
      const validTokens = [
        'a'.repeat(64),
        'f'.repeat(64),
        '0'.repeat(64),
        '1234567890abcdef'.repeat(4),
        'ABCDEF1234567890'.repeat(4).toLowerCase(),
      ];

      validTokens.forEach(token => {
        expect(AuthManager.isValidSessionToken(token)).toBe(true);
      });
    });

    it('should reject invalid tokens', () => {
      const invalidTokens = [
        '',                           // empty
        'too-short',                  // too short
        'x'.repeat(64),               // invalid hex char
        'g'.repeat(64),               // invalid hex char
        'a'.repeat(63),               // wrong length (too short)
        'a'.repeat(65),               // wrong length (too long)
        'a'.repeat(32),               // 32 chars (half the required)
        'not-a-hex-token',            // random string
        '!@#$%^&*()'.repeat(6) + '1234', // special chars
      ];

      invalidTokens.forEach(token => {
        expect(AuthManager.isValidSessionToken(token)).toBe(false);
      });
    });

    it('should handle null and undefined', () => {
      expect(AuthManager.isValidSessionToken(null as any)).toBe(false);
      expect(AuthManager.isValidSessionToken(undefined as any)).toBe(false);
    });

    it('should be case insensitive for hex characters', () => {
      const upperCase = 'ABCDEF1234567890'.repeat(4);
      const lowerCase = upperCase.toLowerCase();
      const mixedCase = 'AbCdEf1234567890'.repeat(4);

      expect(AuthManager.isValidSessionToken(upperCase)).toBe(true);
      expect(AuthManager.isValidSessionToken(lowerCase)).toBe(true);
      expect(AuthManager.isValidSessionToken(mixedCase)).toBe(true);
    });
  });

  describe('Integration with auth flow', () => {
    it('should validate tokens generated by crypto.randomBytes', () => {
      // Test 100 random tokens to ensure consistency
      for (let i = 0; i < 100; i++) {
        const token = crypto.randomBytes(32).toString('hex');
        expect(AuthManager.isValidSessionToken(token)).toBe(true);
      }
    });
  });
});