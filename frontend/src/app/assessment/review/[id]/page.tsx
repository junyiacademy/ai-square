'use client';

import { useState, useEffect } from 'react';
import { useParams, useRouter } from 'next/navigation';
import { useTranslation } from 'react-i18next';
import Link from 'next/link';
import AssessmentResults from '@/components/assessment/AssessmentResults';
import { AssessmentResult, AssessmentData, UserAnswer } from '@/types/assessment';

interface StoredAssessment {
  assessment_id: string;
  user_id: string;
  timestamp: string;
  duration_seconds: number;
  language: string;
  scores: {
    overall: number;
    domains: {
      engaging_with_ai: number;
      creating_with_ai: number;
      managing_with_ai: number;
      designing_with_ai: number;
    };
  };
  summary: {
    total_questions: number;
    correct_answers: number;
    level: string;
  };
  answers: Array<{
    question_id: string;
    selected: string;
    correct: string;
    time_spent: number;
  }>;
}

export default function AssessmentReviewPage() {
  const params = useParams();
  const router = useRouter();
  const { t, i18n } = useTranslation('assessment');
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [assessmentData, setAssessmentData] = useState<AssessmentData | null>(null);
  const [storedResult, setStoredResult] = useState<StoredAssessment | null>(null);
  const [currentUser, setCurrentUser] = useState<{ id: string; email?: string } | null>(null);

  // Get current user
  useEffect(() => {
    const isLoggedIn = localStorage.getItem('isLoggedIn');
    const userData = localStorage.getItem('user');
    
    if (isLoggedIn === 'true' && userData) {
      const user = JSON.parse(userData);
      setCurrentUser({
        id: user.email,
        email: user.email
      });
    }
  }, []);

  // Fetch assessment result
  useEffect(() => {
    const fetchAssessmentResult = async () => {
      if (!currentUser || !params.id) return;
      
      setLoading(true);
      setError(null);
      
      try {
        // First fetch the stored result
        const response = await fetch(`/api/assessment/results/${params.id}?userId=${currentUser.id}`);
        
        if (!response.ok) {
          throw new Error('Assessment not found');
        }
        
        const result = await response.json();
        setStoredResult(result);
        
        // Then fetch the assessment questions data
        const assessmentResponse = await fetch(`/api/assessment?lang=${result.language || i18n.language}`);
        const assessmentData = await assessmentResponse.json();
        setAssessmentData(assessmentData);
        
      } catch (err) {
        console.error('Error fetching assessment:', err);
        setError(err instanceof Error ? err.message : 'Failed to load assessment');
      } finally {
        setLoading(false);
      }
    };
    
    fetchAssessmentResult();
  }, [currentUser, params.id, i18n.language]);

  if (!currentUser) {
    return (
      <div className="min-h-screen bg-gray-50 flex items-center justify-center">
        <div className="text-center">
          <p className="text-gray-600">{t('history.notLoggedIn')}</p>
          <Link href="/login" className="text-indigo-600 hover:text-indigo-700 mt-4 inline-block">
            {t('signIn')}
          </Link>
        </div>
      </div>
    );
  }

  if (loading) {
    return (
      <div className="min-h-screen bg-gray-50 flex items-center justify-center">
        <div className="text-center">
          <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-indigo-600 mx-auto"></div>
          <p className="mt-4 text-gray-600">{t('loading')}</p>
        </div>
      </div>
    );
  }

  if (error || !storedResult || !assessmentData) {
    return (
      <div className="min-h-screen bg-gray-50 flex items-center justify-center">
        <div className="text-center">
          <p className="text-red-600 mb-4">{error || t('errorLoading')}</p>
          <Link 
            href="/assessment/history"
            className="bg-indigo-600 text-white px-6 py-2 rounded-lg hover:bg-indigo-700"
          >
            {t('history.title')}
          </Link>
        </div>
      </div>
    );
  }

  // Convert stored result to AssessmentResult format
  const assessmentResult: AssessmentResult = {
    overallScore: storedResult.scores.overall,
    domainScores: storedResult.scores.domains,
    totalQuestions: storedResult.summary.total_questions,
    correctAnswers: storedResult.summary.correct_answers,
    timeSpentSeconds: storedResult.duration_seconds,
    completedAt: new Date(storedResult.timestamp),
    level: storedResult.summary.level as 'beginner' | 'intermediate' | 'advanced' | 'expert',
    recommendations: [] // Will be generated by AssessmentResults component
  };

  // Convert stored answers to UserAnswer format
  const userAnswers: UserAnswer[] = storedResult.answers.map(answer => ({
    questionId: answer.question_id,
    selectedAnswer: answer.selected as 'a' | 'b' | 'c' | 'd',
    timeSpent: answer.time_spent,
    isCorrect: answer.selected === answer.correct
  }));

  return (
    <div className="min-h-screen bg-gray-50">
      {/* Header */}
      <div className="bg-white shadow-sm border-b">
        <div className="max-w-6xl mx-auto px-4 sm:px-6 lg:px-8 py-4">
          <div className="flex items-center justify-between">
            <div>
              <h1 className="text-xl font-semibold text-gray-900">
                {t('review.title', 'Assessment Review')}
              </h1>
              <p className="text-sm text-gray-500 mt-1">
                ID: {params.id}
              </p>
            </div>
            <Link 
              href="/assessment/history"
              className="text-indigo-600 hover:text-indigo-700 text-sm font-medium"
            >
              ‚Üê {t('history.title')}
            </Link>
          </div>
        </div>
      </div>

      {/* Results Component */}
      <AssessmentResults
        result={assessmentResult}
        domains={assessmentData.domains}
        onRetake={() => router.push('/assessment')}
        questions={assessmentData.questions}
        userAnswers={userAnswers}
        isReview={true}
      />
    </div>
  );
}