import { NextResponse } from 'next/server';
import { promises as fs } from 'fs';
import path from 'path';
import * as yaml from 'js-yaml';
import { cacheService } from '@/lib/cache/cache-service';
import { pblScenarioService } from '@/lib/services/pbl-scenario-service';

// Types for YAML data
interface ScenarioInfo {
  id: string;
  title: string;
  title_zhTW?: string;
  title_ja?: string;
  title_ko?: string;
  title_es?: string;
  title_fr?: string;
  title_de?: string;
  title_ru?: string;
  title_it?: string;
  description: string;
  description_zhTW?: string;
  description_ja?: string;
  description_ko?: string;
  description_es?: string;
  description_fr?: string;
  description_de?: string;
  description_ru?: string;
  description_it?: string;
  difficulty: string;
  estimated_duration: number;
  target_domains: string[];
  [key: string]: unknown;
}

interface ScenarioYAML {
  scenario_info: ScenarioInfo;
}

interface LocalizedField {
  [key: string]: string | undefined;
}

// Helper function to get localized field
function getLocalizedValue(data: LocalizedField, fieldName: string, lang: string): string {
  if (!data) return '';
  
  // Use language code directly as suffix
  const langSuffix = lang;
  
  const localizedField = `${fieldName}_${langSuffix}`;
  return data[localizedField] || data[fieldName] || '';
}

// Load scenarios using unified architecture
async function loadScenariosFromUnifiedArchitecture(lang: string): Promise<Record<string, unknown>[]> {
  const scenarios: Record<string, unknown>[] = [];
  
  try {
    // Get available YAML IDs
    const yamlIds = await pblScenarioService.listAvailableYAMLIds();
    
    for (const yamlId of yamlIds) {
      try {
        // ÂâµÂª∫ÊàñÂèñÂæó Scenario UUID
        const scenario = await pblScenarioService.findOrCreateScenarioByYAMLId(yamlId, lang);
        
        // Choose emoji based on yaml ID
        const emojiMap: Record<string, string> = {
          'ai-job-search': 'üíº',
          'ai-education-design': 'üéì',
          'ai-stablecoin-trading': '‚Çø',
          'ai-robotics-development': 'ü§ñ',
          'high-school-climate-change': 'üåç',
          'high-school-digital-wellness': 'üì±',
          'high-school-smart-city': 'üèôÔ∏è',
          'high-school-creative-arts': 'üé®',
          'high-school-health-assistant': 'üíó'
        };
        
        scenarios.push({
          id: scenario.id, // UUID
          yamlId: yamlId, // ÂéüÂßã yaml ID for compatibility
          sourceType: 'pbl',
          title: scenario.title,
          description: scenario.description,
          difficulty: scenario.metadata?.difficulty,
          estimatedDuration: scenario.metadata?.estimatedDuration,
          targetDomains: scenario.metadata?.targetDomains,
          targetDomain: scenario.metadata?.targetDomains, // for compatibility
          domains: scenario.metadata?.targetDomains, // for compatibility 
          taskCount: scenario.taskTemplates?.length || 0,
          isAvailable: true,
          thumbnailEmoji: emojiMap[yamlId] || 'ü§ñ'
        });
      } catch (error) {
        console.error(`Error loading scenario ${yamlId}:`, error);
      }
    }
  } catch (error) {
    console.error('Error loading scenarios:', error);
  }
  
  // Add placeholder scenarios for future content
  scenarios.push(
    {
      id: 'ai-creative-writing',
      title: getLocalizedValue({
        title: 'Creative Writing with AI',
        title_zhTW: '‰ΩøÁî® AI ÈÄ≤Ë°åÂâµÊÑèÂØ´‰Ωú',
        title_ja: 'AI„Çí‰Ωø„Å£„ÅüÂâµÈÄ†ÁöÑ„Å™ÊñáÁ´†‰ΩúÊàê',
        title_ko: 'AIÎ•º ÌôúÏö©Ìïú Ï∞ΩÏùòÏ†Å Í∏ÄÏì∞Í∏∞',
        title_es: 'Escritura Creativa con IA',
        title_fr: '√âcriture Cr√©ative avec IA',
        title_de: 'Kreatives Schreiben mit KI',
        title_ru: '–¢–≤–æ—Ä—á–µ—Å–∫–æ–µ –ø–∏—Å—å–º–æ —Å –ò–ò',
        title_it: 'Scrittura Creativa con IA'
      } as LocalizedField, 'title', lang),
      description: getLocalizedValue({
        description: 'Master AI-powered creative writing techniques',
        description_zhTW: 'ÊéåÊè° AI È©ÖÂãïÁöÑÂâµÊÑèÂØ´‰ΩúÊäÄÂ∑ß',
        description_ja: 'AI„ÇíÊ¥ªÁî®„Åó„ÅüÂâµÈÄ†ÁöÑ„Å™ÊñáÁ´†‰ΩúÊàêÊäÄË°ì„Çí„Éû„Çπ„Çø„Éº„Åô„Çã',
        description_ko: 'AI Í∏∞Î∞ò Ï∞ΩÏùòÏ†Å Í∏ÄÏì∞Í∏∞ Í∏∞Î≤ï ÎßàÏä§ÌÑ∞ÌïòÍ∏∞',
        description_es: 'Domina las t√©cnicas de escritura creativa con IA',
        description_fr: 'Ma√Ætrisez les techniques d\'√©criture cr√©ative avec IA',
        description_de: 'Meistern Sie KI-gest√ºtzte kreative Schreibtechniken',
        description_ru: '–û—Å–≤–æ–π—Ç–µ —Ç–µ—Ö–Ω–∏–∫–∏ —Ç–≤–æ—Ä—á–µ—Å–∫–æ–≥–æ –ø–∏—Å—å–º–∞ —Å –ø–æ–º–æ—â—å—é –ò–ò',
        description_it: 'Padroneggia le tecniche di scrittura creativa con IA'
      } as LocalizedField, 'description', lang),
      difficulty: 'beginner',
      estimatedDuration: 60,
      targetDomains: ['creating_with_ai'],
      targetDomain: ['creating_with_ai'],
      domains: ['creating_with_ai'],
      taskCount: 0,
      isAvailable: false,
      thumbnailEmoji: '‚úçÔ∏è'
    },
    {
      id: 'ai-data-analysis',
      title: getLocalizedValue({
        title: 'Data Analysis with AI',
        title_zhTW: '‰ΩøÁî® AI ÈÄ≤Ë°åÊï∏ÊìöÂàÜÊûê',
        title_ja: 'AI„Çí‰Ωø„Å£„Åü„Éá„Éº„ÇøÂàÜÊûê',
        title_ko: 'AIÎ•º ÌôúÏö©Ìïú Îç∞Ïù¥ÌÑ∞ Î∂ÑÏÑù',
        title_es: 'An√°lisis de Datos con IA',
        title_fr: 'Analyse de Donn√©es avec IA',
        title_de: 'Datenanalyse mit KI',
        title_ru: '–ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö —Å –ò–ò',
        title_it: 'Analisi dei Dati con IA'
      } as LocalizedField, 'title', lang),
      description: getLocalizedValue({
        description: 'Use AI for advanced data analysis and insights',
        description_zhTW: '‰ΩøÁî® AI ÈÄ≤Ë°åÈÄ≤ÈöéÊï∏ÊìöÂàÜÊûêÂíåÊ¥ûÂØü',
        description_ja: 'AI„Çí‰Ωø„Å£„ÅüÈ´òÂ∫¶„Å™„Éá„Éº„ÇøÂàÜÊûê„Å®Ê¥ûÂØü',
        description_ko: 'AIÎ•º ÏÇ¨Ïö©Ìïú Í≥†Í∏â Îç∞Ïù¥ÌÑ∞ Î∂ÑÏÑù Î∞è Ïù∏ÏÇ¨Ïù¥Ìä∏',
        description_es: 'Usa IA para an√°lisis avanzado de datos e insights',
        description_fr: 'Utilisez l\'IA pour l\'analyse avanc√©e et les insights',
        description_de: 'Nutzen Sie KI f√ºr erweiterte Datenanalyse und Erkenntnisse',
        description_ru: '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ò–ò –¥–ª—è —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –¥–∞–Ω–Ω—ã—Ö',
        description_it: 'Usa l\'IA per analisi avanzate e insights'
      } as LocalizedField, 'description', lang),
      difficulty: 'advanced',
      estimatedDuration: 120,
      targetDomains: ['managing_with_ai', 'designing_with_ai'],
      targetDomain: ['managing_with_ai', 'designing_with_ai'],
      domains: ['managing_with_ai', 'designing_with_ai'],
      taskCount: 0,
      isAvailable: false,
      thumbnailEmoji: 'üìä'
    }
  );
  
  return scenarios;
}

export const revalidate = 3600; // Revalidate every hour
export const dynamic = 'force-dynamic'; // Force dynamic rendering

export async function GET(request: Request) {
  try {
    // Get language from query params
    const { searchParams } = new URL(request.url);
    const lang = searchParams.get('lang') || 'en';
    
    // Use cache
    const cacheKey = `pbl:scenarios:${lang}`;
    const cached = await cacheService.get(cacheKey);
    
    if (cached) {
      return NextResponse.json(cached, {
        headers: {
          'Cache-Control': 'public, max-age=3600, stale-while-revalidate=86400',
          'X-Cache': 'HIT'
        }
      });
    }

    // Load scenarios using unified architecture
    const scenarios = await loadScenariosFromUnifiedArchitecture(lang);

    const result = {
      success: true,
      data: {
        scenarios,
        total: scenarios.length,
        available: scenarios.filter(s => s.isAvailable).length
      },
      meta: {
        timestamp: new Date().toISOString(),
        version: '1.0.0'
      }
    };
    
    // Store in cache
    await cacheService.set(cacheKey, result, { ttl: 60 * 60 * 1000 }); // 1 hour
    
    return NextResponse.json(result, {
      headers: {
        'Cache-Control': 'public, max-age=3600, stale-while-revalidate=86400',
        'X-Cache': 'MISS'
      }
    });
  } catch (error) {
    console.error('Error fetching PBL scenarios:', error);
    return NextResponse.json(
      {
        success: false,
        error: {
          code: 'FETCH_SCENARIOS_ERROR',
          message: 'Failed to fetch PBL scenarios'
        }
      },
      { status: 500 }
    );
  }
}