name: Deploy to Staging

on:
  push:
    branches:
      - main
  workflow_dispatch:  # Allow manual trigger

env:
  PROJECT_ID: ai-square-463013
  REGION: asia-east1
  SERVICE_NAME: ai-square-staging
  # Ê≠£Á¢∫ÁöÑÊúçÂãô URL Âü∫Êñº .env.staging
  SERVICE_URL: https://ai-square-staging-731209836128.asia-east1.run.app

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: staging
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v1
      with:
        service_account_key: ${{ secrets.GCP_SA_KEY }}
        project_id: ${{ env.PROJECT_ID }}
        export_default_credentials: true

    - name: Configure Docker for GCR
      run: |
        gcloud auth configure-docker asia-east1-docker.pkg.dev

    - name: Build and Deploy to Cloud Run
      run: |
        cd frontend
        
        # Build Docker image
        docker build -f Dockerfile.staging -t asia-east1-docker.pkg.dev/${{ env.PROJECT_ID }}/ai-square/frontend:${{ github.sha }} .
        
        # Push to Artifact Registry
        docker push asia-east1-docker.pkg.dev/${{ env.PROJECT_ID }}/ai-square/frontend:${{ github.sha }}
        
        # Deploy to Cloud Run
        gcloud run deploy ${{ env.SERVICE_NAME }} \
          --image asia-east1-docker.pkg.dev/${{ env.PROJECT_ID }}/ai-square/frontend:${{ github.sha }} \
          --region ${{ env.REGION }} \
          --platform managed \
          --allow-unauthenticated \
          --port 3000 \
          --memory 2Gi \
          --cpu 1 \
          --max-instances 10 \
          --timeout 300 \
          --add-cloudsql-instances ai-square-463013:asia-east1:ai-square-db-staging-asia \
          --set-env-vars NODE_ENV=production \
          --set-env-vars ENVIRONMENT=staging \
          --set-env-vars GOOGLE_CLOUD_PROJECT=ai-square-463013 \
          --set-env-vars GOOGLE_CLOUD_REGION=asia-east1 \
          --set-env-vars VERTEX_AI_LOCATION=asia-east1 \
          --set-env-vars VERTEX_AI_MODEL=gemini-2.5-flash \
          --set-env-vars GCS_BUCKET_NAME=ai-square-db-v2 \
          --set-env-vars DB_HOST="/cloudsql/ai-square-463013:asia-east1:ai-square-db-staging-asia" \
          --set-env-vars DB_PORT=5432 \
          --set-env-vars DB_NAME=ai_square_db \
          --set-env-vars DB_USER=postgres \
          --set-env-vars DB_PASSWORD=postgres \
          --set-env-vars NEXTAUTH_URL=${{ env.SERVICE_URL }} \
          --set-env-vars NEXTAUTH_SECRET=${{ secrets.NEXTAUTH_SECRET }} \
          --set-env-vars JWT_SECRET=${{ secrets.JWT_SECRET }} \
          --set-env-vars ENABLE_REDIS=false \
          --set-env-vars ENABLE_MONITORING=false

    - name: Initialize Database Scenarios
      run: |
        echo "üîÑ Waiting for service to be ready..."
        sleep 30
        
        echo "üìä Initializing Assessment scenarios..."
        curl -X POST "${{ env.SERVICE_URL }}/api/admin/init-assessment" \
          -H "Content-Type: application/json" \
          -d '{"force": false}' || echo "Assessment init may have failed"
        
        echo "üéì Initializing PBL scenarios..."
        curl -X POST "${{ env.SERVICE_URL }}/api/admin/init-pbl" \
          -H "Content-Type: application/json" \
          -d '{"force": false}' || echo "PBL init may have failed"
        
        echo "üöÄ Initializing Discovery scenarios..."
        curl -X POST "${{ env.SERVICE_URL }}/api/admin/init-discovery" \
          -H "Content-Type: application/json" \
          -d '{"force": false}' || echo "Discovery init may have failed"

    - name: Verify Deployment
      run: |
        echo "üîç Testing service at: ${{ env.SERVICE_URL }}"
        
        # Test basic health check
        echo "Testing health endpoint..."
        HTTP_STATUS=$(curl -s -o /dev/null -w "%{http_code}" "${{ env.SERVICE_URL }}/api/health" || echo "000")
        echo "Health endpoint returned: $HTTP_STATUS"
        
        # Test scenarios API
        echo "Testing scenarios API..."
        ASSESSMENT_STATUS=$(curl -s -o /dev/null -w "%{http_code}" "${{ env.SERVICE_URL }}/api/assessment/scenarios" || echo "000")
        PBL_STATUS=$(curl -s -o /dev/null -w "%{http_code}" "${{ env.SERVICE_URL }}/api/pbl/scenarios" || echo "000")
        DISCOVERY_STATUS=$(curl -s -o /dev/null -w "%{http_code}" "${{ env.SERVICE_URL }}/api/discovery/scenarios" || echo "000")
        
        echo "API Status - Assessment: $ASSESSMENT_STATUS, PBL: $PBL_STATUS, Discovery: $DISCOVERY_STATUS"
        
        # Check scenario counts
        echo "üìä Checking scenario data..."
        ASSESSMENT_COUNT=$(curl -s "${{ env.SERVICE_URL }}/api/assessment/scenarios" | jq -r '.data.scenarios | length // 0' 2>/dev/null || echo "0")
        PBL_COUNT=$(curl -s "${{ env.SERVICE_URL }}/api/pbl/scenarios" | jq -r '.data.scenarios | length // 0' 2>/dev/null || echo "0")
        DISCOVERY_COUNT=$(curl -s "${{ env.SERVICE_URL }}/api/discovery/scenarios" | jq -r '.data.scenarios | length // 0' 2>/dev/null || echo "0")
        
        echo "Scenario Counts - Assessment: $ASSESSMENT_COUNT, PBL: $PBL_COUNT, Discovery: $DISCOVERY_COUNT"
        
        # Verify deployment success
        if [ "$ASSESSMENT_STATUS" = "200" ] && [ "$PBL_STATUS" = "200" ] && [ "$DISCOVERY_STATUS" = "200" ]; then
          echo "‚úÖ Deployment verification successful - All APIs working"
        else
          echo "‚ö†Ô∏è Deployment completed but some APIs may not be fully ready"
        fi

    - name: Notify Slack (Optional)
      if: always()
      env:
        SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK_URL }}
      run: |
        if [ "${{ job.status }}" = "success" ]; then
          STATUS="‚úÖ Success"
          COLOR="good"
        else
          STATUS="‚ùå Failed"
          COLOR="danger"
        fi
        
        if [ -n "$SLACK_WEBHOOK" ]; then
          curl -X POST $SLACK_WEBHOOK \
            -H 'Content-Type: application/json' \
            -d "{
              \"attachments\": [{
                \"color\": \"$COLOR\",
                \"title\": \"Staging Deployment $STATUS\",
                \"text\": \"Branch: ${{ github.ref_name }}\nCommit: ${{ github.sha }}\nURL: ${{ env.SERVICE_URL }}\",
                \"footer\": \"GitHub Actions\",
                \"footer_icon\": \"https://github.githubassets.com/favicon.ico\"
              }]
            }"
        fi