generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                     String       @id @default(uuid()) @db.Uuid
  email                  String       @unique
  passwordHash           String       @map("password_hash")
  role                   String       @default("student")
  name                   String?
  avatarUrl              String?      @map("avatar_url")
  preferredLanguage      String       @default("en") @map("preferred_language")
  learningPreferences    Json?        @map("learning_preferences")
  preferences            Json         @default("{}")
  emailVerified          Boolean      @default(false) @map("email_verified")
  emailVerifiedAt        DateTime?    @map("email_verified_at")
  emailVerificationToken String?      @map("email_verification_token")
  resetPasswordToken     String?      @map("reset_password_token")
  resetPasswordExpires   DateTime?    @map("reset_password_expires")
  onboardingCompleted    Boolean      @default(false) @map("onboarding_completed")
  onboardingStep         Int          @default(0) @map("onboarding_step")
  level                  Int          @default(1)
  totalXp                Int          @default(0) @map("total_xp")
  achievements           Json         @default("[]")
  skills                 Json         @default("[]")
  lastLoginAt            DateTime?    @map("last_login_at")
  lastActiveDate         DateTime?    @map("last_active_date") @db.Date
  createdAt              DateTime     @default(now()) @map("created_at")
  updatedAt              DateTime     @updatedAt @map("updated_at")
  metadata               Json         @default("{}")
  evaluations            Evaluation[]
  programs               Program[]
  createdScenarios       Scenario[]   @relation("CreatedScenarios")
  updatedScenarios       Scenario[]   @relation("UpdatedScenarios")
  sessions               sessions[]

  @@map("users")
}

model Scenario {
  id                 String    @id @default(uuid()) @db.Uuid
  mode               String
  status             String    @default("active")
  version            String    @default("1.0.0")
  sourceType         String?   @map("source_type")
  sourcePath         String?   @map("source_path")
  sourceId           String?   @map("source_id")
  sourceMetadata     Json?     @map("source_metadata")
  title              Json
  description        Json?
  objectives         Json?
  taskTemplates      Json?     @map("task_templates")
  sequenceData       Json?     @map("sequence_data")
  pblData            Json?     @map("pbl_data")
  discoveryData      Json?     @map("discovery_data")
  assessmentData     Json?     @map("assessment_data")
  difficulty         String?
  estimatedTime      Int?      @map("estimated_time")
  estimatedMinutes   Int?      @map("estimated_minutes")
  prerequisites      String[]
  tags               String[]
  aiModules          Json?     @map("ai_modules")
  resources          Json?
  media              Json      @default("{}")
  imageUrl           String?   @map("image_url")
  icon               String?
  color              String?
  xpRewards          Json      @default("{}") @map("xp_rewards")
  ksaCodes           String[]  @map("ksa_codes")
  unlockRequirements Json      @default("{}") @map("unlock_requirements")
  isPublished        Boolean   @default(true) @map("is_published")
  publishedAt        DateTime  @default(now()) @map("published_at")
  completionRate     Decimal   @default(0) @map("completion_rate") @db.Decimal(5, 2)
  averageRating      Decimal   @default(0) @map("average_rating") @db.Decimal(3, 2)
  totalEnrollments   Int       @default(0) @map("total_enrollments")
  createdAt          DateTime  @default(now()) @map("created_at")
  updatedAt          DateTime  @updatedAt @map("updated_at")
  createdBy          String?   @map("created_by") @db.Uuid
  updatedBy          String?   @map("updated_by") @db.Uuid
  metadata           Json      @default("{}")
  programs           Program[]
  createdByUser      User?     @relation("CreatedScenarios", fields: [createdBy], references: [id])
  updatedByUser      User?     @relation("UpdatedScenarios", fields: [updatedBy], references: [id])
  tasks              Task[]

  @@index([mode])
  @@index([status])
  @@map("scenarios")
}

model Program {
  id                   String       @id @default(uuid()) @db.Uuid
  mode                 String
  scenarioId           String       @map("scenario_id") @db.Uuid
  userId               String       @map("user_id") @db.Uuid
  status               String       @default("pending")
  currentTaskIndex     Int          @default(0) @map("current_task_index")
  completedTaskCount   Int          @default(0) @map("completed_task_count")
  totalTaskCount       Int          @default(0) @map("total_task_count")
  context              Json?
  state                Json?
  pblData              Json?        @map("pbl_data")
  discoveryData        Json?        @map("discovery_data")
  assessmentData       Json?        @map("assessment_data")
  totalScore           Decimal?     @map("total_score") @db.Decimal(10, 2)
  domainScores         Json?        @map("domain_scores")
  xpEarned             Int          @default(0) @map("xp_earned")
  badgesEarned         Json         @default("[]") @map("badges_earned")
  timeSpentSeconds     Int          @default(0) @map("time_spent_seconds")
  completionPercentage Decimal      @default(0) @map("completion_percentage") @db.Decimal(5, 2)
  achievements         Json         @default("[]")
  startedAt            DateTime?    @map("started_at")
  completedAt          DateTime?    @map("completed_at")
  expiresAt            DateTime?    @map("expires_at")
  createdAt            DateTime     @default(now()) @map("created_at")
  updatedAt            DateTime     @updatedAt @map("updated_at")
  metadata             Json?
  evaluations          Evaluation[]
  scenario             Scenario     @relation(fields: [scenarioId], references: [id], onDelete: Cascade)
  user                 User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  tasks                Task[]

  @@index([userId])
  @@index([scenarioId])
  @@index([status])
  @@map("programs")
}

model Task {
  id                String       @id @default(uuid()) @db.Uuid
  mode              String
  programId         String       @map("program_id") @db.Uuid
  scenarioId        String       @map("scenario_id") @db.Uuid
  taskIndex         Int          @map("task_index")
  scenarioTaskIndex Int?         @map("scenario_task_index")
  type              String
  status            String       @default("pending")
  title             Json?
  description       Json?
  instructions      Json?
  content           Json?
  context           Json?
  metadata          Json?
  interactions      Json         @default("[]")
  aiFeedback        Json?        @map("ai_feedback")
  attempts          Int          @default(0)
  attemptCount      Int          @default(0) @map("attempt_count")
  maxAttempts       Int?         @map("max_attempts")
  allowedAttempts   Int?         @map("allowed_attempts")
  aiConfig          Json?        @map("ai_config")
  score             Decimal?     @db.Decimal(10, 2)
  timeSpentSeconds  Int          @default(0) @map("time_spent_seconds")
  startedAt         DateTime?    @map("started_at")
  completedAt       DateTime?    @map("completed_at")
  createdAt         DateTime     @default(now()) @map("created_at")
  updatedAt         DateTime     @updatedAt @map("updated_at")
  evaluations       Evaluation[]
  program           Program      @relation(fields: [programId], references: [id], onDelete: Cascade)
  scenario          Scenario     @relation(fields: [scenarioId], references: [id], onDelete: Cascade)

  @@index([programId])
  @@map("tasks")
}

model Evaluation {
  id                String   @id @default(uuid()) @db.Uuid
  mode              String
  taskId            String?  @map("task_id") @db.Uuid
  programId         String   @map("program_id") @db.Uuid
  userId            String   @map("user_id") @db.Uuid
  evaluationType    String   @map("evaluation_type")
  evaluationSubtype String?  @map("evaluation_subtype")
  score             Decimal? @db.Decimal(10, 2)
  maxScore          Decimal? @map("max_score") @db.Decimal(10, 2)
  domainScores      Json?    @map("domain_scores")
  feedback          Json?
  feedbackText      String?  @map("feedback_text")
  feedbackData      Json?    @default("{}") @map("feedback_data")
  strengths         String[]
  improvements      String[]
  criteria          Json?
  rubric            Json?
  metadata          Json?
  aiModel           String?  @map("ai_model")
  aiProvider        String?  @map("ai_provider")
  aiConfig          Json?    @map("ai_config")
  aiResponse        Json?    @map("ai_response")
  aiAnalysis        Json?    @default("{}") @map("ai_analysis")
  pblData           Json?    @default("{}") @map("pbl_data")
  discoveryData     Json?    @default("{}") @map("discovery_data")
  assessmentData    Json?    @default("{}") @map("assessment_data")
  timeTakenSeconds  Int?     @default(0) @map("time_taken_seconds")
  evaluatedAt       DateTime @default(now()) @map("evaluated_at")
  createdAt         DateTime @default(now()) @map("created_at")
  program           Program  @relation(fields: [programId], references: [id], onDelete: Cascade)
  task              Task?    @relation(fields: [taskId], references: [id], onDelete: Cascade)
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([taskId])
  @@index([userId])
  @@map("evaluations")
}

model migrations {
  id          Int       @id @default(autoincrement())
  filename    String    @unique @db.VarChar(255)
  executed_at DateTime? @default(now()) @db.Timestamptz(6)
}

model sessions {
  token      String    @id @db.VarChar(64)
  user_id    String    @db.Uuid
  email      String    @db.VarChar(255)
  role       String    @db.VarChar(50)
  created_at DateTime? @default(now()) @db.Timestamptz(6)
  expires_at DateTime  @db.Timestamptz(6)
  metadata   Json?     @default("{}")
  users      User      @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([expires_at], map: "idx_sessions_expires_at")
  @@index([user_id], map: "idx_sessions_user_id")
}
