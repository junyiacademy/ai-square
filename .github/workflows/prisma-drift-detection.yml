name: Prisma Schema Drift Detection (Official)

on:
  push:
    branches: [main, staging, development]
    paths:
      - 'frontend/prisma/**'
      - 'frontend/src/types/database.ts'
      - 'frontend/src/lib/repositories/**'
  pull_request:
    branches: [main, staging]
  schedule:
    # ÊØèÂ§©Êó©‰∏ä 9 ÈªûÊ™¢Êü•‰∏ÄÊ¨°ÔºàÂè∞ÁÅ£ÊôÇÈñìÔºâ
    - cron: '0 1 * * *'
  workflow_dispatch:

jobs:
  detect-drift:
    name: Detect Schema Drift
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: ai_square_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      postgres-shadow:
        image: postgres:16
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: ai_square_shadow
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5433:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json
      
      - name: Install dependencies
        working-directory: frontend
        run: npm ci
      
      - name: Setup database URLs
        run: |
          echo "DATABASE_URL=postgresql://postgres:postgres@localhost:5432/ai_square_db" >> $GITHUB_ENV
          echo "SHADOW_DATABASE_URL=postgresql://postgres:postgres@localhost:5433/ai_square_shadow" >> $GITHUB_ENV
      
      - name: Apply migrations to test database
        working-directory: frontend
        run: |
          npx prisma migrate deploy
          echo "‚úÖ Migrations applied successfully"
      
      - name: Check migration status
        working-directory: frontend
        run: |
          echo "üìä Checking migration status..."
          npx prisma migrate status || true
      
      - name: Detect schema drift
        working-directory: frontend
        run: |
          echo "üîç Detecting schema drift..."
          
          # Run migrate diff to check for drift
          DIFF_OUTPUT=$(npx prisma migrate diff \
            --from-url "$DATABASE_URL" \
            --to-migrations ./prisma/migrations \
            --shadow-database-url "$SHADOW_DATABASE_URL" \
            --exit-code \
            2>&1 || echo "DRIFT_DETECTED")
          
          if echo "$DIFF_OUTPUT" | grep -q "DRIFT_DETECTED"; then
            echo "‚ùå Schema drift detected!"
            echo "$DIFF_OUTPUT"
            
            # Check for specific known issues
            if echo "$DIFF_OUTPUT" | grep -q "evaluation_subtype"; then
              echo "üö® Known issue: evaluation_subtype field mismatch"
              echo "This is from commit 24197721 - schema v3 implementation"
            fi
            
            exit 1
          else
            echo "‚úÖ No schema drift detected"
          fi
      
      - name: Validate Prisma schema
        working-directory: frontend
        run: |
          echo "‚úÖ Validating Prisma schema..."
          npx prisma validate
      
      - name: Generate Prisma Client
        working-directory: frontend
        run: |
          echo "üîß Generating Prisma Client..."
          npx prisma generate
      
      - name: Compare with production (if main branch)
        if: github.ref == 'refs/heads/main' && github.event_name == 'schedule'
        working-directory: frontend
        env:
          PROD_DATABASE_URL: ${{ secrets.PROD_DATABASE_URL }}
        run: |
          if [ -n "$PROD_DATABASE_URL" ]; then
            echo "üîç Comparing with production database..."
            npx prisma migrate diff \
              --from-url "$PROD_DATABASE_URL" \
              --to-migrations ./prisma/migrations \
              --shadow-database-url "$SHADOW_DATABASE_URL" || true
          else
            echo "‚ö†Ô∏è Production database URL not configured"
          fi
      
      - name: Create drift report
        if: failure()
        uses: actions/upload-artifact@v3
        with:
          name: schema-drift-report
          path: |
            frontend/prisma/schema.prisma
            frontend/prisma/migrations/
            frontend/src/types/database.ts

  notify-drift:
    name: Notify Schema Drift
    runs-on: ubuntu-latest
    needs: detect-drift
    if: failure() && (github.event_name == 'schedule' || github.ref == 'refs/heads/main')
    
    steps:
      - name: Send Slack notification
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_AISQUARE_WEBHOOK_URL }}
        run: |
          if [ -n "$SLACK_WEBHOOK_URL" ]; then
            curl -X POST $SLACK_WEBHOOK_URL \
              -H 'Content-Type: application/json' \
              -d '{
                "text": "üö® Schema Drift Detected in AI Square!",
                "attachments": [{
                  "color": "danger",
                  "fields": [
                    {"title": "Repository", "value": "'"$GITHUB_REPOSITORY"'", "short": true},
                    {"title": "Branch", "value": "'"$GITHUB_REF_NAME"'", "short": true},
                    {"title": "Action", "value": "Review and fix schema inconsistencies", "short": false},
                    {"title": "Link", "value": "'"$GITHUB_SERVER_URL/$GITHUB_REPOSITORY/actions/runs/$GITHUB_RUN_ID"'", "short": false}
                  ]
                }]
              }'
          fi