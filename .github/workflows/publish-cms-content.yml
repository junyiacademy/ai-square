name: Publish CMS Content to GCS

on:
  push:
    branches:
      - main
    paths:
      - 'cms/content/**'
  workflow_dispatch:

env:
  GCS_BUCKET: ai-square-content

jobs:
  build-and-publish:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          
      - name: Install dependencies
        run: |
          npm install -g js-yaml
          
      - name: Convert YAML to JSON
        run: |
          mkdir -p content-json
          
          # Function to convert YAML to JSON
          convert_yaml_to_json() {
            local input_file=$1
            local output_file=$2
            echo "Converting $input_file to $output_file"
            node -e "
              const fs = require('fs');
              const yaml = require('js-yaml');
              const content = fs.readFileSync('$input_file', 'utf8');
              const json = yaml.load(content);
              fs.writeFileSync('$output_file', JSON.stringify(json, null, 2));
            "
          }
          
          # Convert PBL scenarios
          mkdir -p content-json/pbl
          for file in cms/content/pbl/*.yaml; do
            if [ -f "$file" ]; then
              filename=$(basename "$file" .yaml)
              convert_yaml_to_json "$file" "content-json/pbl/${filename}.json"
            fi
          done
          
          # Convert Rubrics
          mkdir -p content-json/rubrics
          for file in cms/content/rubrics/*.yaml; do
            if [ -f "$file" ]; then
              filename=$(basename "$file" .yaml)
              convert_yaml_to_json "$file" "content-json/rubrics/${filename}.json"
            fi
          done
          
      - name: Generate Index Files
        run: |
          # Generate PBL index
          node -e "
            const fs = require('fs');
            const path = require('path');
            
            function generateIndex(dir, outputPath) {
              const files = fs.readdirSync(dir)
                .filter(f => f.endsWith('.json') && f !== 'index.json')
                .map(f => {
                  const content = JSON.parse(fs.readFileSync(path.join(dir, f), 'utf8'));
                  return {
                    id: content.id || f.replace('.json', ''),
                    title: content.title,
                    title_zh: content.title_zh,
                    title_ja: content.title_ja,
                    description: content.description,
                    description_zh: content.description_zh,
                    difficulty: content.difficulty,
                    duration: content.duration,
                    file: f
                  };
                });
              
              fs.writeFileSync(outputPath, JSON.stringify({ scenarios: files }, null, 2));
            }
            
            // Generate indexes
            if (fs.existsSync('content-json/pbl')) {
              generateIndex('content-json/pbl', 'content-json/pbl/index.json');
            }
            if (fs.existsSync('content-json/rubrics')) {
              generateIndex('content-json/rubrics', 'content-json/rubrics/index.json');
            }
            
            // Generate master index
            const masterIndex = {
              updated: new Date().toISOString(),
              sections: ['pbl', 'rubrics', 'assessments']
            };
            fs.writeFileSync('content-json/index.json', JSON.stringify(masterIndex, null, 2));
          "
          
      - name: Setup Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}
          
      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}
          
      - name: Upload to GCS
        run: |
          # Upload all JSON files to GCS
          gsutil -m rsync -r -d content-json/ gs://${GCS_BUCKET}/
          
          # Set proper content type and cache control
          gsutil -m setmeta -h "Content-Type:application/json" \
            -h "Cache-Control:public, max-age=300" \
            "gs://${GCS_BUCKET}/**.json"
            
      - name: Make GCS bucket public
        run: |
          # Ensure bucket is publicly readable
          gsutil iam ch allUsers:objectViewer gs://${GCS_BUCKET}