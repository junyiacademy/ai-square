name: Auto Deploy

on:
  push:
    branches:
      - main        # Deploy to production
      - staging     # Deploy to staging
  workflow_dispatch:

env:
  PROJECT_ID: ai-square-463013
  REGION: asia-east1

jobs:
  # Quality checks first
  quality-checks:
    name: Code Quality & Tests
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install dependencies
        working-directory: ./frontend
        run: npm ci

      - name: TypeScript Check
        working-directory: ./frontend
        run: npx tsc --noEmit

      - name: ESLint Check
        working-directory: ./frontend
        run: npx next lint

      - name: Run Unit Tests
        working-directory: ./frontend
        run: npx jest --ci --coverage --testPathIgnorePatterns='/tests/integration/|/e2e/|/frontend/e2e/|\.spec\.ts$' --watchAll=false

  # Deploy job
  deploy:
    name: Deploy to Cloud Run
    runs-on: ubuntu-latest
    needs: quality-checks
    permissions:
      contents: read
      id-token: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Determine environment
        id: env
        run: |
          if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            echo "environment=production" >> $GITHUB_OUTPUT
            echo "service=ai-square-production" >> $GITHUB_OUTPUT
            echo "service_account=ai-square-production@ai-square-463013.iam.gserviceaccount.com" >> $GITHUB_OUTPUT
            echo "db_instance=ai-square-db-production" >> $GITHUB_OUTPUT
            echo "📦 Deploying to PRODUCTION"
          else
            echo "environment=staging" >> $GITHUB_OUTPUT
            echo "service=ai-square-staging" >> $GITHUB_OUTPUT
            echo "service_account=ai-square-staging@ai-square-463013.iam.gserviceaccount.com" >> $GITHUB_OUTPUT
            echo "db_instance=ai-square-db-staging-asia" >> $GITHUB_OUTPUT
            echo "📦 Deploying to STAGING"
          fi

      - name: Setup Cloud SDK
        uses: google-github-actions/setup-gcloud@v2

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Setup Service Account Permissions
        run: |
          echo "🔧 Configuring Service Account permissions..."

          # Vertex AI permissions
          gcloud projects add-iam-policy-binding ${{ env.PROJECT_ID }} \
            --member="serviceAccount:${{ steps.env.outputs.service_account }}" \
            --role="roles/aiplatform.user" \
            --condition=None 2>/dev/null || true

          # Cloud SQL permissions
          gcloud projects add-iam-policy-binding ${{ env.PROJECT_ID }} \
            --member="serviceAccount:${{ steps.env.outputs.service_account }}" \
            --role="roles/cloudsql.client" \
            --condition=None 2>/dev/null || true

          echo "✅ Service Account permissions configured"

      - name: Run Database Migrations
        run: |
          echo "🗄️ Running database migrations..."

          # Download Cloud SQL Proxy
          wget -q https://dl.google.com/cloudsql/cloud_sql_proxy.linux.amd64 -O cloud_sql_proxy
          chmod +x cloud_sql_proxy
          ./cloud_sql_proxy -instances=${{ env.PROJECT_ID }}:${{ env.REGION }}:${{ steps.env.outputs.db_instance }}=tcp:5433 &
          PROXY_PID=$!

          # Wait for proxy
          sleep 5

          # Setup Node.js for Prisma
          cd frontend
          npm ci --quiet

          # Run migrations based on environment
          if [[ "${{ steps.env.outputs.environment }}" == "production" ]]; then
            export DATABASE_URL="postgresql://postgres:${{ secrets.PROD_DB_PASSWORD }}@localhost:5433/ai_square_db"
          else
            export DATABASE_URL="postgresql://postgres:${{ secrets.STAGING_DB_PASSWORD }}@localhost:5433/ai_square_db"
          fi

          npx prisma migrate deploy

          # Kill proxy
          kill $PROXY_PID || true
          cd ..

          echo "✅ Migrations completed"

      - name: Submit Cloud Build
        run: |
          if [[ "${{ steps.env.outputs.environment }}" == "production" ]]; then
            CONFIG_FILE="cloudbuild.production.yaml"
            DB_PASSWORD="${{ secrets.PROD_DB_PASSWORD }}"
            DATABASE_URL="postgresql://${{ secrets.PROD_DB_USER }}:${{ secrets.PROD_DB_PASSWORD }}@/${{ secrets.PROD_DB_NAME }}?host=${{ secrets.PROD_DB_HOST }}"
          else
            CONFIG_FILE="cloudbuild.staging.yaml"
            DB_PASSWORD="${{ secrets.STAGING_DB_PASSWORD }}"
            DATABASE_URL="postgresql://${{ secrets.STAGING_DB_USER }}:${{ secrets.STAGING_DB_PASSWORD }}@/${{ secrets.STAGING_DB_NAME }}?host=${{ secrets.STAGING_DB_HOST }}"
          fi

          cd frontend
          gcloud builds submit \
            --config ${CONFIG_FILE} \
            --project ${{ env.PROJECT_ID }} \
            --region ${{ env.REGION }}

      - name: Verify Deployment
        run: |
          SERVICE_URL=$(gcloud run services describe ${{ steps.env.outputs.service }} --region ${{ env.REGION }} --format 'value(status.url)')
          echo "📍 Service URL: $SERVICE_URL"

          # Wait for service to be ready
          echo "⏳ Waiting for service to be ready..."
          sleep 15

          # Health check
          if curl -sf "$SERVICE_URL/api/health" > /dev/null; then
            echo "✅ Service is healthy!"
          else
            echo "⚠️ Health check failed (service may still be starting)"
          fi

          echo "✅ Deployment to ${{ steps.env.outputs.environment }} complete!"
          echo "🌐 Service: ${{ steps.env.outputs.service }}"
          echo "🔗 URL: $SERVICE_URL"
