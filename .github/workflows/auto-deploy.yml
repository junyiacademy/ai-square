name: Auto Deploy

on:
  push:
    branches:
      - main        # Deploy to production
      - staging     # Deploy to staging
  workflow_dispatch:

env:
  PROJECT_ID: ai-square-463013
  REGION: asia-east1

jobs:
  # Quality checks first
  quality-checks:
    name: Code Quality & Tests
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install dependencies
        working-directory: ./frontend
        run: npm ci

      - name: TypeScript Check
        working-directory: ./frontend
        run: npx tsc --noEmit

      - name: ESLint Check
        working-directory: ./frontend
        run: npx next lint

      - name: Run Unit Tests
        working-directory: ./frontend
        run: npx jest --ci --coverage --testPathIgnorePatterns='/tests/integration/|/e2e/|/frontend/e2e/|\.spec\.ts$' --watchAll=false

  # Schema validation (parallel execution, doesn't block deployment)
  schema-validation:
    name: Schema Validation
    runs-on: ubuntu-latest

    permissions:
      contents: read
      id-token: write

    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: ai_square_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install dependencies
        working-directory: ./frontend
        run: npm ci

      - name: Validate Schema Consistency
        working-directory: ./frontend
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/ai_square_db
          DB_HOST: localhost
          DB_PORT: 5432
          DB_USER: postgres
          DB_PASSWORD: postgres
          DB_NAME: ai_square_db
        run: |
          echo "üîç Checking schema consistency..."
          npx prisma migrate deploy
          npx prisma generate
          npx tsx scripts/validate-schema-consistency.ts || echo "‚ö†Ô∏è Schema validation script not found"

      - name: Check Prisma Migration Status
        working-directory: ./frontend
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/ai_square_db
        run: |
          echo "üìä Checking migration status..."
          npx prisma migrate status || true

      - name: Upload schema report on failure
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: schema-validation-report-${{ github.run_id }}
          path: |
            frontend/prisma/schema.prisma
            frontend/prisma/migrations/

  # Deploy job
  deploy:
    name: Deploy to Cloud Run
    runs-on: ubuntu-latest
    needs: quality-checks
    permissions:
      contents: read
      id-token: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Determine environment
        id: env
        run: |
          if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            echo "environment=production" >> $GITHUB_OUTPUT
            echo "service=ai-square-production" >> $GITHUB_OUTPUT
            echo "service_account=ai-square-production@ai-square-463013.iam.gserviceaccount.com" >> $GITHUB_OUTPUT
            echo "db_instance=ai-square-db-production" >> $GITHUB_OUTPUT
            echo "üì¶ Deploying to PRODUCTION"
          else
            echo "environment=staging" >> $GITHUB_OUTPUT
            echo "service=ai-square-staging" >> $GITHUB_OUTPUT
            echo "service_account=ai-square-staging@ai-square-463013.iam.gserviceaccount.com" >> $GITHUB_OUTPUT
            echo "db_instance=ai-square-db-staging-asia" >> $GITHUB_OUTPUT
            echo "üì¶ Deploying to STAGING"
          fi

      - name: Setup Cloud SDK
        uses: google-github-actions/setup-gcloud@v2

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Setup Service Account Permissions
        run: |
          echo "üîß Configuring Service Account permissions..."

          # Vertex AI permissions
          gcloud projects add-iam-policy-binding ${{ env.PROJECT_ID }} \
            --member="serviceAccount:${{ steps.env.outputs.service_account }}" \
            --role="roles/aiplatform.user" \
            --condition=None 2>/dev/null || true

          # Cloud SQL permissions
          gcloud projects add-iam-policy-binding ${{ env.PROJECT_ID }} \
            --member="serviceAccount:${{ steps.env.outputs.service_account }}" \
            --role="roles/cloudsql.client" \
            --condition=None 2>/dev/null || true

          echo "‚úÖ Service Account permissions configured"

      - name: Run Database Migrations
        run: |
          echo "üóÑÔ∏è Running database migrations..."

          # Download Cloud SQL Proxy
          wget -q https://dl.google.com/cloudsql/cloud_sql_proxy.linux.amd64 -O cloud_sql_proxy
          chmod +x cloud_sql_proxy
          ./cloud_sql_proxy -instances=${{ env.PROJECT_ID }}:${{ env.REGION }}:${{ steps.env.outputs.db_instance }}=tcp:5433 &
          PROXY_PID=$!

          # Wait for proxy
          sleep 5

          # Setup Node.js for Prisma
          cd frontend
          npm ci --quiet

          # Run migrations based on environment
          if [[ "${{ steps.env.outputs.environment }}" == "production" ]]; then
            export DATABASE_URL="postgresql://postgres:${{ secrets.PROD_DB_PASSWORD }}@localhost:5433/ai_square_db"
          else
            export DATABASE_URL="postgresql://postgres:${{ secrets.STAGING_DB_PASSWORD }}@localhost:5433/ai_square_db"
          fi

          npx prisma migrate deploy

          # Kill proxy
          kill $PROXY_PID || true
          cd ..

          echo "‚úÖ Migrations completed"

      - name: Submit Cloud Build
        run: |
          set -e  # Exit on error

          echo "üîç Debugging: Environment = ${{ steps.env.outputs.environment }}"

          if [[ "${{ steps.env.outputs.environment }}" == "production" ]]; then
            CONFIG_FILE="cloudbuild.production.yaml"

            # Set values - only password from secrets, rest are hardcoded
            DB_PASSWORD="${{ secrets.PROD_DB_PASSWORD }}"
            DB_USER="postgres"
            DB_NAME="ai_square_db"
            DB_HOST="/cloudsql/ai-square-463013:asia-east1:ai-square-db-production"

            # Validate critical secrets
            if [[ -z "${DB_PASSWORD}" ]]; then
              echo "‚ùå Error: PROD_DB_PASSWORD secret is not set!"
              echo "Please configure the following secrets in GitHub:"
              echo "  - PROD_DB_PASSWORD (required)"
              echo "  - PROD_DB_USER (optional, defaults to 'postgres')"
              echo "  - PROD_DB_NAME (optional, defaults to 'ai_square_db')"
              echo "  - PROD_DB_HOST (optional, defaults to Cloud SQL instance)"
              exit 1
            fi

            # Build DATABASE_URL with proper escaping
            DATABASE_URL="postgresql://${DB_USER}:${DB_PASSWORD}@/${DB_NAME}?host=${DB_HOST}"
            NEXTAUTH_SECRET="${{ secrets.NEXTAUTH_SECRET }}"
            VERTEX_AI_KEY="${{ secrets.VERTEX_AI_KEY }}"

            echo "üîç Debug: Database configuration set (values masked)"
          else
            CONFIG_FILE="cloudbuild.staging.yaml"

            # Set values - only password from secrets, rest are hardcoded
            DB_PASSWORD="${{ secrets.STAGING_DB_PASSWORD }}"
            DB_USER="postgres"
            DB_NAME="ai_square_db"
            DB_HOST="/cloudsql/ai-square-463013:asia-east1:ai-square-db-staging-asia"

            # Validate critical secrets
            if [[ -z "${DB_PASSWORD}" ]]; then
              echo "‚ùå Error: STAGING_DB_PASSWORD secret is not set!"
              echo "Please configure the following secrets in GitHub:"
              echo "  - STAGING_DB_PASSWORD (required)"
              echo "  - STAGING_DB_USER (optional, defaults to 'postgres')"
              echo "  - STAGING_DB_NAME (optional, defaults to 'ai_square_db')"
              echo "  - STAGING_DB_HOST (optional, defaults to Cloud SQL instance)"
              exit 1
            fi

            # Build DATABASE_URL with proper escaping
            DATABASE_URL="postgresql://${DB_USER}:${DB_PASSWORD}@/${DB_NAME}?host=${DB_HOST}"
            NEXTAUTH_SECRET="${{ secrets.NEXTAUTH_SECRET }}"
            VERTEX_AI_KEY="${{ secrets.VERTEX_AI_KEY }}"

            echo "üîç Debug: Database configuration set (values masked)"
          fi

          echo "üì¶ Using config: ${CONFIG_FILE}"
          echo "üîó DATABASE_URL pattern: postgresql://[USER]:[PASS]@/[DB]?host=[HOST]"

          # Create substitutions with proper escaping
          SUBSTITUTIONS="_DB_PASSWORD=${DB_PASSWORD}"
          SUBSTITUTIONS="${SUBSTITUTIONS},_DATABASE_URL=${DATABASE_URL}"
          SUBSTITUTIONS="${SUBSTITUTIONS},_NEXTAUTH_SECRET=${NEXTAUTH_SECRET}"
          SUBSTITUTIONS="${SUBSTITUTIONS},_VERTEX_AI_KEY=${VERTEX_AI_KEY}"

          echo "üîß Substitutions created (values masked for security)"

          cd frontend
          gcloud builds submit \
            --config "${CONFIG_FILE}" \
            --project "${{ env.PROJECT_ID }}" \
            --region "${{ env.REGION }}" \
            --substitutions="${SUBSTITUTIONS}"

      - name: Verify Deployment
        run: |
          SERVICE_URL=$(gcloud run services describe ${{ steps.env.outputs.service }} --region ${{ env.REGION }} --format 'value(status.url)')
          echo "üìç Service URL: $SERVICE_URL"

          # Wait for service to be ready
          echo "‚è≥ Waiting for service to be ready..."
          sleep 15

          # Health check
          if curl -sf "$SERVICE_URL/api/health" > /dev/null; then
            echo "‚úÖ Service is healthy!"
          else
            echo "‚ö†Ô∏è Health check failed (service may still be starting)"
          fi

          echo "‚úÖ Deployment to ${{ steps.env.outputs.environment }} complete!"
          echo "üåê Service: ${{ steps.env.outputs.service }}"
          echo "üîó URL: $SERVICE_URL"

      - name: Clean up old GCR images
        if: success()
        run: |
          echo "üßπ Cleaning up old container images..."

          # Function to keep only latest N images
          cleanup_repository() {
            local REPO=$1
            local KEEP_COUNT=${2:-3}  # Keep latest 3 images by default

            echo "üì¶ Cleaning $REPO (keeping latest $KEEP_COUNT images)..."

            # Get all images except the latest KEEP_COUNT
            IMAGES=$(gcloud container images list-tags "$REPO" \
              --format="get(digest)" \
              --sort-by="~timestamp" 2>/dev/null | tail -n +$((KEEP_COUNT + 1)))

            if [ -n "$IMAGES" ]; then
              echo "$IMAGES" | while read -r DIGEST; do
                if [ -n "$DIGEST" ]; then
                  echo "  üóëÔ∏è Deleting: ${DIGEST:0:12}..."
                  gcloud container images delete "$REPO@$DIGEST" --quiet --force-delete-tags 2>/dev/null || true
                fi
              done
            else
              echo "  ‚úÖ No old images to clean"
            fi
          }

          # Clean up based on environment
          if [[ "${{ steps.env.outputs.environment }}" == "production" ]]; then
            cleanup_repository "gcr.io/${{ env.PROJECT_ID }}/ai-square-production" 3
          else
            cleanup_repository "gcr.io/${{ env.PROJECT_ID }}/ai-square-staging" 3
          fi

          # Also clean up ai-square-frontend (shared repository)
          cleanup_repository "gcr.io/${{ env.PROJECT_ID }}/ai-square-frontend" 5

          echo "‚úÖ GCR cleanup complete"
