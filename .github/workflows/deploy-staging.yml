# ============================================
# AI Square Staging Deployment with CI/CD
# ============================================
# Complete CI/CD pipeline: Quality checks → Deploy
# ============================================

name: Deploy to Staging

on:
  push:
    branches:
      - main
  workflow_dispatch:

env:
  PROJECT_ID: ai-square-463013
  REGION: asia-east1
  SERVICE_NAME: ai-square-staging
  REPOSITORY: ai-square-frontend

jobs:
  # Step 1: Quality Checks (只保留必要的檢查)
  quality-checks:
    name: Code Quality & Tests
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json
      
      - name: Install dependencies
        working-directory: ./frontend
        run: npm ci
      
      - name: TypeScript Check
        working-directory: ./frontend
        run: npx tsc --noEmit
      
      - name: ESLint Check
        working-directory: ./frontend
        run: npm run lint
      
      - name: Run Tests
        working-directory: ./frontend
        run: npm run test:ci
      
      - name: Build Check
        working-directory: ./frontend
        run: npm run build

  # Step 2: Deploy to Staging
  deploy:
    name: Deploy to Cloud Run
    runs-on: ubuntu-latest
    needs: quality-checks
    
    permissions:
      contents: read
      id-token: write
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}
      
      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
      
      - name: Configure Docker
        run: gcloud auth configure-docker gcr.io
      
      # Build and push Docker image directly
      - name: Build and Push Docker image
        run: |
          echo "🚀 Building Docker image..."
          docker build -f frontend/Dockerfile \
            -t gcr.io/$PROJECT_ID/$REPOSITORY:$GITHUB_SHA \
            -t gcr.io/$PROJECT_ID/$REPOSITORY:staging-latest \
            ./frontend
          
          echo "📤 Pushing to Container Registry..."
          docker push gcr.io/$PROJECT_ID/$REPOSITORY:$GITHUB_SHA
          docker push gcr.io/$PROJECT_ID/$REPOSITORY:staging-latest
      
      # Deploy to Cloud Run
      - name: Deploy to Cloud Run
        run: |
          echo "🚀 Deploying to Cloud Run..."
          gcloud run deploy $SERVICE_NAME \
            --image gcr.io/$PROJECT_ID/$REPOSITORY:$GITHUB_SHA \
            --region $REGION \
            --platform managed \
            --add-cloudsql-instances ai-square-463013:asia-east1:ai-square-db-staging-asia \
            --update-env-vars DATABASE_URL="postgresql://postgres:${{ secrets.STAGING_DB_PASSWORD }}@/ai_square_db?host=/cloudsql/ai-square-463013:asia-east1:ai-square-db-staging-asia",DB_HOST="/cloudsql/ai-square-463013:asia-east1:ai-square-db-staging-asia",DB_NAME=ai_square_db,DB_USER=postgres,DB_PASSWORD=${{ secrets.STAGING_DB_PASSWORD }},GOOGLE_CLOUD_PROJECT=ai-square-463013,GCP_PROJECT_ID=ai-square-463013
      
      # Quick health check
      - name: Verify Deployment
        run: |
          SERVICE_URL=$(gcloud run services describe $SERVICE_NAME --region $REGION --format 'value(status.url)')
          echo "📍 Service URL: $SERVICE_URL"
          
          # Give service time to start
          echo "⏳ Waiting for service to be ready..."
          sleep 15
          
          # Health check
          if curl -sf "$SERVICE_URL/api/health" > /dev/null; then
            echo "✅ Service is healthy!"
          else
            echo "⚠️  Health check failed (service may still be starting)"
          fi
          
          echo "✅ Deployment complete!"
          echo "🔗 Access your staging environment at: $SERVICE_URL"