name: Complete CI/CD Pipeline with Auto-Rollback

on:
  push:
    branches:
      - main
      - staging
  pull_request:
    branches:
      - main
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        type: choice
        options:
          - staging
          - production
      skip_tests:
        description: 'Skip E2E tests (emergency only)'
        required: false
        type: boolean
        default: false

env:
  PROJECT_ID: ai-square-463013
  REGION: asia-east1
  
jobs:
  # ============================================
  # 1. Pre-deployment Validation
  # ============================================
  validate:
    name: Validate & Test
    runs-on: ubuntu-latest
    outputs:
      coverage: ${{ steps.coverage.outputs.percentage }}
      
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json
          
      - name: Install dependencies
        working-directory: frontend
        run: npm ci
        
      - name: Run TypeScript check
        working-directory: frontend
        run: npx tsc --noEmit
        
      - name: Run ESLint
        working-directory: frontend
        run: npm run lint
        
      - name: Run tests with coverage
        working-directory: frontend
        run: npm run test:ci -- --coverage
        
      - name: Extract coverage percentage
        id: coverage
        working-directory: frontend
        run: |
          COVERAGE=$(cat coverage/coverage-summary.json | jq '.total.lines.pct')
          echo "percentage=$COVERAGE" >> $GITHUB_OUTPUT
          
      - name: Build application
        working-directory: frontend
        run: npm run build
        
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: frontend/.next

  # ============================================
  # 2. Security Scanning
  # ============================================
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: validate
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Run npm audit
        working-directory: frontend
        run: npm audit --audit-level=high || true
        
      - name: Run TruffleHog
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: ${{ github.event.repository.default_branch }}
          head: HEAD
          
      - name: Build Docker image for scanning
        working-directory: frontend
        run: |
          docker build -t ai-square:scan .
          
      - name: Run Trivy container scan
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'ai-square:scan'
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH'
          
      - name: Upload Trivy results
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  # ============================================
  # 3. Performance Baseline
  # ============================================
  performance-baseline:
    name: Performance Baseline
    runs-on: ubuntu-latest
    needs: validate
    outputs:
      baseline_time: ${{ steps.perf.outputs.time }}
      
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          
      - name: Run performance tests
        id: perf
        working-directory: frontend
        run: |
          npm ci
          # Run basic performance test
          START_TIME=$(date +%s)
          npm run build
          END_TIME=$(date +%s)
          BUILD_TIME=$((END_TIME - START_TIME))
          echo "time=$BUILD_TIME" >> $GITHUB_OUTPUT
          echo "Build time: ${BUILD_TIME}s"

  # ============================================
  # 4. Quality Gates Check
  # ============================================
  quality-gates:
    name: Quality Gates
    runs-on: ubuntu-latest
    needs: [validate, security, performance-baseline]
    outputs:
      passed: ${{ steps.evaluate.outputs.passed }}
      
    steps:
      - name: Evaluate quality metrics
        id: evaluate
        run: |
          COVERAGE=${{ needs.validate.outputs.coverage }}
          BUILD_TIME=${{ needs.performance-baseline.outputs.baseline_time }}
          
          echo "Coverage: $COVERAGE%"
          echo "Build time: ${BUILD_TIME}s"
          
          PASSED=true
          REASONS=""
          
          # Check coverage (minimum 70%)
          if (( $(echo "$COVERAGE < 70" | bc -l) )); then
            PASSED=false
            REASONS="${REASONS}Coverage below 70% (actual: $COVERAGE%). "
          fi
          
          # Check build time (maximum 300s)
          if [ "$BUILD_TIME" -gt 300 ]; then
            PASSED=false
            REASONS="${REASONS}Build time exceeds 5 minutes (actual: ${BUILD_TIME}s). "
          fi
          
          echo "passed=$PASSED" >> $GITHUB_OUTPUT
          
          if [ "$PASSED" = "false" ]; then
            echo "❌ Quality gates failed: $REASONS"
            exit 1
          else
            echo "✅ All quality gates passed!"
          fi

  # ============================================
  # 5. Deploy to Staging (Blue-Green)
  # ============================================
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [quality-gates]
    if: |
      needs.quality-gates.outputs.passed == 'true' && 
      (github.ref == 'refs/heads/staging' || github.event.inputs.environment == 'staging')
    environment:
      name: staging
      url: ${{ steps.deploy.outputs.url }}
    outputs:
      service_url: ${{ steps.deploy.outputs.url }}
      deployment_id: ${{ steps.deploy.outputs.deployment_id }}
      
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          service_account_key: ${{ secrets.GCP_SA_KEY }}
          project_id: ${{ env.PROJECT_ID }}
          
      - name: Configure Docker
        run: gcloud auth configure-docker
        
      - name: Build and push image
        working-directory: frontend
        run: |
          DEPLOYMENT_ID="${GITHUB_SHA::7}-$(date +%s)"
          echo "deployment_id=$DEPLOYMENT_ID" >> $GITHUB_OUTPUT
          
          IMAGE_TAG="$DEPLOYMENT_ID"
          IMAGE_URL="gcr.io/${{ env.PROJECT_ID }}/ai-square-staging:$IMAGE_TAG"
          
          docker build -t $IMAGE_URL .
          docker push $IMAGE_URL
          
          # Tag as candidate
          docker tag $IMAGE_URL gcr.io/${{ env.PROJECT_ID }}/ai-square-staging:candidate
          docker push gcr.io/${{ env.PROJECT_ID }}/ai-square-staging:candidate
          
      - name: Deploy to staging (Blue-Green)
        id: deploy
        run: |
          # Deploy new version as blue
          gcloud run deploy ai-square-staging-blue \
            --image gcr.io/${{ env.PROJECT_ID }}/ai-square-staging:candidate \
            --region ${{ env.REGION }} \
            --platform managed \
            --no-traffic \
            --tag blue-${{ steps.build.outputs.deployment_id }} \
            --set-env-vars="NODE_ENV=production,DEPLOYMENT_ID=${{ steps.build.outputs.deployment_id }}" \
            --add-cloudsql-instances=${{ env.PROJECT_ID }}:${{ env.REGION }}:ai-square-db-staging-asia
            
          # Get service URL
          SERVICE_URL=$(gcloud run services describe ai-square-staging-blue --region ${{ env.REGION }} --format 'value(status.url)')
          echo "url=$SERVICE_URL" >> $GITHUB_OUTPUT

  # ============================================
  # 6. Post-deployment E2E Tests
  # ============================================
  e2e-tests:
    name: E2E Tests
    runs-on: ubuntu-latest
    needs: deploy-staging
    if: ${{ !inputs.skip_tests }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          
      - name: Install dependencies
        working-directory: frontend
        run: |
          npm ci
          npx playwright install chromium --with-deps
          
      - name: Run E2E tests
        working-directory: frontend
        env:
          PLAYWRIGHT_BASE_URL: ${{ needs.deploy-staging.outputs.service_url }}
        run: |
          # Run critical path tests
          npm run test:e2e -- \
            --grep "@critical" \
            --project=chromium \
            --reporter=json \
            --reporter=html \
            --retries=2
            
      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: e2e-test-results
          path: |
            frontend/playwright-report/
            frontend/test-results/
            
      - name: Performance tests
        working-directory: frontend
        run: |
          # Test response times
          for i in {1..5}; do
            RESPONSE_TIME=$(curl -w "%{time_total}" -o /dev/null -s "${{ needs.deploy-staging.outputs.service_url }}")
            echo "Response time $i: ${RESPONSE_TIME}s"
            
            # Fail if response time > 2s
            if (( $(echo "$RESPONSE_TIME > 2" | bc -l) )); then
              echo "❌ Response time exceeds 2s threshold"
              exit 1
            fi
          done

  # ============================================
  # 7. Traffic Switch Decision
  # ============================================
  traffic-switch:
    name: Switch Traffic
    runs-on: ubuntu-latest
    needs: [deploy-staging, e2e-tests]
    if: success()
    
    steps:
      - name: Setup Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          service_account_key: ${{ secrets.GCP_SA_KEY }}
          project_id: ${{ env.PROJECT_ID }}
          
      - name: Switch traffic to new version
        run: |
          # Gradually shift traffic (canary deployment)
          echo "🚀 Starting canary deployment..."
          
          # 10% traffic
          gcloud run services update-traffic ai-square-staging \
            --region ${{ env.REGION }} \
            --tag-traffic blue-${{ needs.deploy-staging.outputs.deployment_id }}=10
            
          sleep 60
          
          # Check error rate (would integrate with monitoring in real scenario)
          echo "✅ 10% traffic - no issues detected"
          
          # 50% traffic
          gcloud run services update-traffic ai-square-staging \
            --region ${{ env.REGION }} \
            --tag-traffic blue-${{ needs.deploy-staging.outputs.deployment_id }}=50
            
          sleep 60
          echo "✅ 50% traffic - no issues detected"
          
          # 100% traffic
          gcloud run services update-traffic ai-square-staging \
            --region ${{ env.REGION }} \
            --to-latest
            
          echo "✅ Successfully switched 100% traffic to new version"

  # ============================================
  # 8. Auto-Rollback on Failure
  # ============================================
  rollback:
    name: Auto Rollback
    runs-on: ubuntu-latest
    needs: [deploy-staging, e2e-tests]
    if: failure()
    
    steps:
      - name: Setup Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          service_account_key: ${{ secrets.GCP_SA_KEY }}
          project_id: ${{ env.PROJECT_ID }}
          
      - name: Rollback to previous version
        run: |
          echo "❌ Deployment failed, initiating rollback..."
          
          # Get previous revision
          PREVIOUS_REVISION=$(gcloud run revisions list \
            --service ai-square-staging \
            --region ${{ env.REGION }} \
            --format "value(metadata.name)" \
            --limit 2 | tail -1)
            
          # Switch traffic back
          gcloud run services update-traffic ai-square-staging \
            --region ${{ env.REGION }} \
            --to-revisions $PREVIOUS_REVISION=100
            
          echo "✅ Rolled back to $PREVIOUS_REVISION"
          
      - name: Notify rollback
        uses: 8398a7/action-slack@v3
        with:
          status: custom
          custom_payload: |
            {
              "text": "🚨 Deployment rollback executed",
              "attachments": [{
                "color": "danger",
                "fields": [
                  {"title": "Environment", "value": "staging", "short": true},
                  {"title": "Reason", "value": "E2E tests failed", "short": true},
                  {"title": "Action", "value": "Rolled back to previous version", "short": false}
                ]
              }]
            }
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}

  # ============================================
  # 9. Monitoring Setup
  # ============================================
  setup-monitoring:
    name: Setup Monitoring
    runs-on: ubuntu-latest
    needs: traffic-switch
    
    steps:
      - name: Setup Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          service_account_key: ${{ secrets.GCP_SA_KEY }}
          project_id: ${{ env.PROJECT_ID }}
          
      - name: Create uptime checks
        run: |
          # Create uptime check
          gcloud monitoring uptime create ai-square-staging \
            --display-name="AI Square Staging Health" \
            --resource-type=uptime-url \
            --hostname="${{ needs.deploy-staging.outputs.service_url }}" \
            --path="/api/health" \
            --check-interval=60s
            
      - name: Create alerts
        run: |
          # Create alert for high error rate
          cat > alert-policy.json << EOF
          {
            "displayName": "High Error Rate - Staging",
            "conditions": [{
              "displayName": "Error rate > 5%",
              "conditionThreshold": {
                "filter": "resource.type=\"cloud_run_revision\" AND resource.labels.service_name=\"ai-square-staging\"",
                "comparison": "COMPARISON_GT",
                "thresholdValue": 0.05,
                "duration": "60s"
              }
            }],
            "notificationChannels": ["${{ secrets.MONITORING_NOTIFICATION_CHANNEL }}"]
          }
          EOF
          
          gcloud alpha monitoring policies create --policy-from-file=alert-policy.json

  # ============================================
  # 10. Auto-Promote to Production
  # ============================================
  auto-promote:
    name: Auto-Promote to Production
    runs-on: ubuntu-latest
    needs: [traffic-switch, setup-monitoring]
    if: github.ref == 'refs/heads/main'
    
    steps:
      - name: Wait for stability
        run: |
          echo "⏳ Waiting 5 minutes to ensure stability..."
          sleep 300
          
      - name: Check metrics
        id: metrics
        run: |
          # In real scenario, would check actual metrics
          # For now, simulate metric checks
          ERROR_RATE=0.001
          RESPONSE_TIME=0.8
          
          PROMOTE=true
          
          if (( $(echo "$ERROR_RATE > 0.01" | bc -l) )); then
            PROMOTE=false
            echo "❌ Error rate too high: $ERROR_RATE"
          fi
          
          if (( $(echo "$RESPONSE_TIME > 1.5" | bc -l) )); then
            PROMOTE=false
            echo "❌ Response time too slow: ${RESPONSE_TIME}s"
          fi
          
          echo "promote=$PROMOTE" >> $GITHUB_OUTPUT
          
      - name: Trigger production deployment
        if: steps.metrics.outputs.promote == 'true'
        uses: actions/github-script@v6
        with:
          script: |
            github.rest.actions.createWorkflowDispatch({
              owner: context.repo.owner,
              repo: context.repo.repo,
              workflow_id: 'deploy-production.yml',
              ref: 'main',
              inputs: {
                validated_image: 'gcr.io/${{ env.PROJECT_ID }}/ai-square-staging:candidate'
              }
            })

  # ============================================
  # 11. Notifications
  # ============================================
  notify:
    name: Send Notifications
    runs-on: ubuntu-latest
    needs: [deploy-staging, e2e-tests, traffic-switch]
    if: always()
    
    steps:
      - name: Determine status
        id: status
        run: |
          if [ "${{ needs.traffic-switch.result }}" == "success" ]; then
            STATUS="success"
            COLOR="good"
            MESSAGE="Deployment successful! 🎉"
          elif [ "${{ needs.traffic-switch.result }}" == "skipped" ]; then
            STATUS="skipped"
            COLOR="warning"
            MESSAGE="Deployment skipped"
          else
            STATUS="failed"
            COLOR="danger"
            MESSAGE="Deployment failed! 🚨"
          fi
          
          echo "status=$STATUS" >> $GITHUB_OUTPUT
          echo "color=$COLOR" >> $GITHUB_OUTPUT
          echo "message=$MESSAGE" >> $GITHUB_OUTPUT
          
      - name: Slack notification
        uses: 8398a7/action-slack@v3
        with:
          status: custom
          custom_payload: |
            {
              "text": "${{ steps.status.outputs.message }}",
              "attachments": [{
                "color": "${{ steps.status.outputs.color }}",
                "fields": [
                  {
                    "title": "Environment",
                    "value": "Staging",
                    "short": true
                  },
                  {
                    "title": "Version",
                    "value": "${{ needs.deploy-staging.outputs.deployment_id }}",
                    "short": true
                  },
                  {
                    "title": "Coverage",
                    "value": "${{ needs.validate.outputs.coverage }}%",
                    "short": true
                  },
                  {
                    "title": "E2E Tests",
                    "value": "${{ needs.e2e-tests.result }}",
                    "short": true
                  },
                  {
                    "title": "Service URL",
                    "value": "${{ needs.deploy-staging.outputs.service_url }}",
                    "short": false
                  },
                  {
                    "title": "Commit",
                    "value": "${{ github.sha }}",
                    "short": false
                  }
                ]
              }]
            }
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}