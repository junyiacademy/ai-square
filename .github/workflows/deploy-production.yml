# ============================================
# AI Square Production Deployment Pipeline
# ============================================
# This workflow handles production deployment
# with additional safeguards and approvals
# ============================================

name: Deploy to Production

on:
  push:
    branches:
      - main
  workflow_dispatch:
    inputs:
      confirm_deployment:
        description: 'Type "DEPLOY" to confirm production deployment'
        required: true
        type: string

env:
  PROJECT_ID: ai-square-463013
  REGION: asia-east1
  SERVICE_NAME: ai-square-frontend
  REPOSITORY: ai-square-frontend

jobs:
  validate-deployment:
    name: Validate Deployment
    runs-on: ubuntu-latest
    
    steps:
      - name: Validate manual deployment
        if: github.event_name == 'workflow_dispatch'
        run: |
          if [ "${{ github.event.inputs.confirm_deployment }}" != "DEPLOY" ]; then
            echo "‚ùå Deployment not confirmed. Type 'DEPLOY' to proceed."
            exit 1
          fi
      
      - name: Log deployment time
        run: |
          # Log deployment time for audit purposes
          echo "üöÄ Deployment initiated at: $(TZ='Asia/Taipei' date '+%Y-%m-%d %H:%M:%S %Z')"
          echo "‚úÖ Production deployment allowed at any time"

  run-staging-tests:
    name: Verify Staging
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Test staging environment
        run: |
          STAGING_URL="https://ai-square-staging-m7s4ucbgba-de.a.run.app"
          
          # Health check
          if ! curl -sf "$STAGING_URL/api/health"; then
            echo "‚ùå Staging health check failed"
            exit 1
          fi
          
          # Test login
          LOGIN_RESPONSE=$(curl -s -X POST "$STAGING_URL/api/auth/login" \
            -H "Content-Type: application/json" \
            -d '{"email": "test@example.com", "password": "test123"}')
          
          if ! echo "$LOGIN_RESPONSE" | grep -q '"success":true'; then
            echo "‚ùå Staging login test failed"
            exit 1
          fi
          
          echo "‚úÖ Staging tests passed"

  build-and-deploy:
    name: Build and Deploy
    needs: [validate-deployment, run-staging-tests]
    runs-on: ubuntu-latest
    environment: production
    
    permissions:
      contents: read
      id-token: write
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json
      
      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY_PROD }}
      
      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
      
      - name: Configure Docker to use gcloud as credential helper
        run: |
          gcloud auth configure-docker
      
      # Build and test
      - name: Install dependencies
        working-directory: frontend
        run: npm ci
      
      - name: Run linting
        working-directory: frontend
        run: npm run lint
      
      - name: Run type checking
        working-directory: frontend
        run: npm run typecheck
      
      - name: Run unit tests
        working-directory: frontend
        run: npm run test:ci
      
      - name: Build application
        working-directory: frontend
        env:
          NODE_ENV: production
        run: npm run build
      
      # Create backup before deployment
      - name: Create database backup
        run: |
          BACKUP_ID="pre-deploy-$(date +%Y%m%d-%H%M%S)"
          gcloud sql backups create \
            --instance=ai-square-db-production \
            --description="Pre-deployment backup for ${{ github.sha }}"
          
          echo "backup_id=$BACKUP_ID" >> $GITHUB_ENV
      
      # Build and push Docker image
      - name: Build Docker image
        run: |
          docker build -f frontend/Dockerfile \
            -t gcr.io/$PROJECT_ID/$REPOSITORY:$GITHUB_SHA \
            -t gcr.io/$PROJECT_ID/$REPOSITORY:latest \
            -t gcr.io/$PROJECT_ID/$REPOSITORY:prod-$(date +%Y%m%d-%H%M%S) \
            ./frontend
      
      - name: Push Docker image
        run: |
          docker push gcr.io/$PROJECT_ID/$REPOSITORY:$GITHUB_SHA
          docker push gcr.io/$PROJECT_ID/$REPOSITORY:latest
          docker push gcr.io/$PROJECT_ID/$REPOSITORY:prod-$(date +%Y%m%d-%H%M%S)
      
      # Deploy to Cloud Run (no traffic)
      - name: Deploy to Cloud Run (no traffic)
        run: |
          gcloud run deploy $SERVICE_NAME \
            --image gcr.io/$PROJECT_ID/$REPOSITORY:$GITHUB_SHA \
            --region $REGION \
            --platform managed \
            --no-traffic \
            --tag pr-${{ github.run_number }}
      
      - name: Get Service URL
        id: get_url
        run: |
          SERVICE_URL=$(gcloud run services describe $SERVICE_NAME --region $REGION --format 'value(status.url)')
          PREVIEW_URL="https://pr-${{ github.run_number }}---$SERVICE_NAME-m7s4ucbgba-de.a.run.app"
          echo "service_url=$SERVICE_URL" >> $GITHUB_OUTPUT
          echo "preview_url=$PREVIEW_URL" >> $GITHUB_OUTPUT
          echo "Production URL: $SERVICE_URL"
          echo "Preview URL: $PREVIEW_URL"
      
      # Test new revision before routing traffic
      - name: Test new revision
        run: |
          PREVIEW_URL="${{ steps.get_url.outputs.preview_url }}"
          
          echo "Testing new revision at $PREVIEW_URL..."
          
          # Wait for service to be ready
          for i in {1..30}; do
            if curl -sf "$PREVIEW_URL/api/health" > /dev/null 2>&1; then
              echo "New revision is ready!"
              break
            fi
            echo "Waiting... ($i/30)"
            sleep 10
          done
          
          # Health check
          if ! curl -sf "$PREVIEW_URL/api/health"; then
            echo "‚ùå New revision health check failed"
            exit 1
          fi
          
          # Test login
          LOGIN_RESPONSE=$(curl -s -X POST "$PREVIEW_URL/api/auth/login" \
            -H "Content-Type: application/json" \
            -d '{"email": "test@example.com", "password": "test123"}')
          
          if ! echo "$LOGIN_RESPONSE" | grep -q '"success":true'; then
            echo "‚ùå New revision login test failed"
            exit 1
          fi
          
          echo "‚úÖ New revision tests passed"

  gradual-rollout:
    name: Gradual Traffic Rollout
    needs: build-and-deploy
    runs-on: ubuntu-latest
    environment: production-traffic
    
    steps:
      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY_PROD }}
      
      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
      
      # Gradual rollout: 10% -> 50% -> 100%
      - name: Route 10% traffic
        run: |
          gcloud run services update-traffic $SERVICE_NAME \
            --region $REGION \
            --to-tags pr-${{ github.run_number }}=10
          
          echo "‚úÖ Routing 10% traffic to new revision"
          echo "‚è±Ô∏è Monitoring for 5 minutes..."
          sleep 300
      
      - name: Check metrics (10% traffic)
        run: |
          # Check error rate and latency
          # In real implementation, query Cloud Monitoring API
          echo "Checking metrics..."
      
      - name: Route 50% traffic
        run: |
          gcloud run services update-traffic $SERVICE_NAME \
            --region $REGION \
            --to-tags pr-${{ github.run_number }}=50
          
          echo "‚úÖ Routing 50% traffic to new revision"
          echo "‚è±Ô∏è Monitoring for 5 minutes..."
          sleep 300
      
      - name: Route 100% traffic
        run: |
          gcloud run services update-traffic $SERVICE_NAME \
            --region $REGION \
            --to-latest
          
          echo "‚úÖ Routing 100% traffic to new revision"

  run-production-tests:
    name: Verify Production
    needs: gradual-rollout
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json
      
      - name: Install dependencies
        working-directory: frontend
        run: |
          npm ci
          npx playwright install chromium
      
      - name: Run production smoke tests
        working-directory: frontend
        env:
          BASE_URL: https://ai-square-frontend-m7s4ucbgba-de.a.run.app
          HEADLESS: true
        run: |
          npm run test:e2e -- --grep "@production @smoke"
      
      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: production-test-report
          path: frontend/playwright-report

  post-deployment:
    name: Post Deployment Tasks
    needs: [gradual-rollout, run-production-tests]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
      - name: Update deployment record
        run: |
          echo "Recording deployment..."
          # In real implementation, update deployment tracking system
      
      - name: Send deployment notification
        if: env.SLACK_WEBHOOK_URL != ''
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL_PROD }}
        run: |
          STATUS="${{ needs.gradual-rollout.result == 'success' && needs.run-production-tests.result == 'success' && '‚úÖ Success' || '‚ùå Failed' }}"
          
          curl -X POST $SLACK_WEBHOOK_URL \
            -H 'Content-type: application/json' \
            --data "{
              \"text\": \"Production Deployment $STATUS\",
              \"blocks\": [
                {
                  \"type\": \"section\",
                  \"text\": {
                    \"type\": \"mrkdwn\",
                    \"text\": \"*üöÄ AI Square Production Deployment*\\n\\nVersion: \`${{ github.sha }}\`\\nDeployed by: \`${{ github.actor }}\`\\nStatus: $STATUS\"
                  }
                },
                {
                  \"type\": \"section\",
                  \"fields\": [
                    {
                      \"type\": \"mrkdwn\",
                      \"text\": \"*Environment:*\\nProduction\"
                    },
                    {
                      \"type\": \"mrkdwn\",
                      \"text\": \"*Backup ID:*\\n\`${{ env.backup_id }}\`\"
                    }
                  ]
                }
              ]
            }"
      
      - name: Create GitHub Release
        if: needs.gradual-rollout.result == 'success'
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: prod-${{ github.run_number }}
          release_name: Production Release ${{ github.run_number }}
          body: |
            ## Production Deployment
            
            **Commit:** ${{ github.sha }}
            **Deployed at:** $(date)
            **Deployed by:** ${{ github.actor }}
            
            ### Changes
            See [commit history](https://github.com/${{ github.repository }}/commits/${{ github.sha }})
          draft: false
          prerelease: false