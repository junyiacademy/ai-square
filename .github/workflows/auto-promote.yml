name: Auto-promote to Production

on:
  workflow_run:
    workflows: ["Enhanced AI Square Deployment Pipeline"]
    types: [completed]
    branches: [staging]
  workflow_dispatch:
    inputs:
      skip_stability_period:
        description: 'Skip stability period (emergency only)'
        required: false
        type: boolean
        default: false

env:
  PROJECT_ID: ai-square-463013
  REGION: asia-east1
  STABILITY_PERIOD: 3600  # 1 hour in seconds
  ERROR_RATE_THRESHOLD: 1.0  # 1% error rate threshold
  LATENCY_THRESHOLD: 2000  # 2 seconds p95 latency threshold

jobs:
  check-staging-health:
    name: Check Staging Health
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' || github.event_name == 'workflow_dispatch' }}
    outputs:
      eligible: ${{ steps.check.outputs.eligible }}
      metrics: ${{ steps.metrics.outputs.data }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          service_account_key: ${{ secrets.GCP_SA_KEY }}
          project_id: ${{ env.PROJECT_ID }}
          
      - name: Wait for stability period
        if: ${{ !github.event.inputs.skip_stability_period }}
        run: |
          echo "Waiting for ${{ env.STABILITY_PERIOD }} seconds stability period..."
          sleep ${{ env.STABILITY_PERIOD }}
          
      - name: Collect staging metrics
        id: metrics
        run: |
          # Get current time and 1 hour ago
          END_TIME=$(date -u +%Y-%m-%dT%H:%M:%SZ)
          START_TIME=$(date -u -d '1 hour ago' +%Y-%m-%dT%H:%M:%SZ)
          
          # Query error rate
          ERROR_RATE=$(gcloud monitoring read \
            --project=${{ env.PROJECT_ID }} \
            --filter='metric.type="run.googleapis.com/request_count" AND 
                     resource.type="cloud_run_revision" AND
                     resource.label.service_name="ai-square-staging" AND
                     metric.label.response_code_class="5xx"' \
            --start-time="$START_TIME" \
            --end-time="$END_TIME" \
            --format=json | jq -r '.[0].points[0].value.int64Value // 0')
            
          TOTAL_REQUESTS=$(gcloud monitoring read \
            --project=${{ env.PROJECT_ID }} \
            --filter='metric.type="run.googleapis.com/request_count" AND 
                     resource.type="cloud_run_revision" AND
                     resource.label.service_name="ai-square-staging"' \
            --start-time="$START_TIME" \
            --end-time="$END_TIME" \
            --format=json | jq -r '.[0].points[0].value.int64Value // 1')
            
          ERROR_PERCENTAGE=$(echo "scale=2; ($ERROR_RATE / $TOTAL_REQUESTS) * 100" | bc)
          
          # Query latency (p95)
          LATENCY_P95=$(gcloud monitoring read \
            --project=${{ env.PROJECT_ID }} \
            --filter='metric.type="run.googleapis.com/request_latencies" AND 
                     resource.type="cloud_run_revision" AND
                     resource.label.service_name="ai-square-staging"' \
            --start-time="$START_TIME" \
            --end-time="$END_TIME" \
            --format=json | jq -r '.[0].points[0].value.distributionValue.exemplars[0].value // 0')
            
          # Output metrics
          cat > metrics.json << EOF
          {
            "error_rate": $ERROR_PERCENTAGE,
            "latency_p95": $LATENCY_P95,
            "total_requests": $TOTAL_REQUESTS,
            "errors": $ERROR_RATE,
            "timestamp": "$END_TIME"
          }
          EOF
          
          echo "data=$(cat metrics.json | jq -c)" >> $GITHUB_OUTPUT
          
      - name: Check promotion eligibility
        id: check
        run: |
          ERROR_RATE=$(echo '${{ steps.metrics.outputs.data }}' | jq -r '.error_rate')
          LATENCY=$(echo '${{ steps.metrics.outputs.data }}' | jq -r '.latency_p95')
          
          ELIGIBLE="true"
          REASONS=""
          
          # Check error rate
          if (( $(echo "$ERROR_RATE > ${{ env.ERROR_RATE_THRESHOLD }}" | bc -l) )); then
            ELIGIBLE="false"
            REASONS="${REASONS}Error rate too high: ${ERROR_RATE}% (threshold: ${{ env.ERROR_RATE_THRESHOLD }}%). "
          fi
          
          # Check latency
          if (( $(echo "$LATENCY > ${{ env.LATENCY_THRESHOLD }}" | bc -l) )); then
            ELIGIBLE="false"
            REASONS="${REASONS}Latency too high: ${LATENCY}ms (threshold: ${{ env.LATENCY_THRESHOLD }}ms). "
          fi
          
          # Check minimum request count
          TOTAL_REQUESTS=$(echo '${{ steps.metrics.outputs.data }}' | jq -r '.total_requests')
          if [ "$TOTAL_REQUESTS" -lt 100 ]; then
            ELIGIBLE="false"
            REASONS="${REASONS}Insufficient traffic: ${TOTAL_REQUESTS} requests (minimum: 100). "
          fi
          
          echo "eligible=$ELIGIBLE" >> $GITHUB_OUTPUT
          
          if [ "$ELIGIBLE" = "false" ]; then
            echo "‚ùå Not eligible for auto-promotion: $REASONS"
          else
            echo "‚úÖ Eligible for auto-promotion"
          fi
          
      - name: Run additional health checks
        if: steps.check.outputs.eligible == 'true'
        run: |
          # API health checks
          ENDPOINTS=(
            "/api/health"
            "/api/pbl/scenarios?lang=en"
            "/api/discovery/scenarios?lang=en"
            "/api/assessment/scenarios?lang=en"
          )
          
          for endpoint in "${ENDPOINTS[@]}"; do
            echo "Checking $endpoint..."
            RESPONSE=$(curl -s -w "\n%{http_code}" https://ai-square-staging-731209836128.asia-east1.run.app$endpoint)
            HTTP_CODE=$(echo "$RESPONSE" | tail -n1)
            
            if [ "$HTTP_CODE" != "200" ]; then
              echo "‚ùå Health check failed for $endpoint (HTTP $HTTP_CODE)"
              echo "eligible=false" >> $GITHUB_OUTPUT
              exit 1
            fi
          done
          
          echo "‚úÖ All health checks passed"

  promote-to-production:
    name: Promote to Production
    runs-on: ubuntu-latest
    needs: check-staging-health
    if: needs.check-staging-health.outputs.eligible == 'true'
    environment:
      name: production-auto-promote
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Notify promotion start
        uses: 8398a7/action-slack@v3
        with:
          status: custom
          custom_payload: |
            {
              text: "üöÄ Auto-promoting staging to production",
              attachments: [{
                color: "warning",
                fields: [
                  { title: "Metrics", value: '${{ needs.check-staging-health.outputs.metrics }}' },
                  { title: "Triggered by", value: "${{ github.actor }}" }
                ]
              }]
            }
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
          
      - name: Get staging image
        id: staging
        run: |
          # Get the current staging image
          STAGING_IMAGE=$(gcloud run services describe ai-square-staging \
            --region=${{ env.REGION }} \
            --format='value(spec.template.spec.containers[0].image)')
            
          echo "image=$STAGING_IMAGE" >> $GITHUB_OUTPUT
          
      - name: Trigger production deployment
        uses: actions/github-script@v7
        with:
          script: |
            const workflow = await github.rest.actions.createWorkflowDispatch({
              owner: context.repo.owner,
              repo: context.repo.repo,
              workflow_id: 'deploy-enhanced.yml',
              ref: 'main',
              inputs: {
                environment: 'production',
                image_override: '${{ steps.staging.outputs.image }}'
              }
            });
            
            console.log('Triggered production deployment:', workflow.data);
            
      - name: Wait for deployment
        run: |
          echo "Waiting for production deployment to complete..."
          sleep 300  # Wait 5 minutes
          
          # Check deployment status
          PROD_IMAGE=$(gcloud run services describe ai-square-frontend \
            --region=${{ env.REGION }} \
            --format='value(spec.template.spec.containers[0].image)')
            
          if [ "$PROD_IMAGE" = "${{ steps.staging.outputs.image }}" ]; then
            echo "‚úÖ Production deployment successful"
          else
            echo "‚ùå Production deployment may have failed"
            exit 1
          fi
          
      - name: Notify promotion complete
        if: success()
        uses: 8398a7/action-slack@v3
        with:
          status: custom
          custom_payload: |
            {
              text: "‚úÖ Auto-promotion to production completed successfully",
              attachments: [{
                color: "good",
                fields: [
                  { title: "Image", value: "${{ steps.staging.outputs.image }}" },
                  { title: "Production URL", value: "https://ai-square-frontend-731209836128.asia-east1.run.app" }
                ]
              }]
            }
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
          
      - name: Notify promotion failure
        if: failure()
        uses: 8398a7/action-slack@v3
        with:
          status: custom
          custom_payload: |
            {
              text: "‚ùå Auto-promotion to production failed",
              attachments: [{
                color: "danger",
                fields: [
                  { title: "Reason", value: "Check workflow logs for details" },
                  { title: "Manual action required", value: "Please investigate and deploy manually if needed" }
                ]
              }]
            }
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}

  create-promotion-record:
    name: Create Promotion Record
    runs-on: ubuntu-latest
    needs: [check-staging-health, promote-to-production]
    if: always()
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Create promotion record
        run: |
          cat > promotion-record-$(date +%Y%m%d-%H%M%S).json << EOF
          {
            "timestamp": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
            "staging_metrics": ${{ needs.check-staging-health.outputs.metrics }},
            "promotion_eligible": "${{ needs.check-staging-health.outputs.eligible }}",
            "promotion_status": "${{ needs.promote-to-production.result }}",
            "triggered_by": "${{ github.event_name }}",
            "workflow_run_id": "${{ github.run_id }}"
          }
          EOF
          
      - name: Upload promotion record
        uses: actions/upload-artifact@v4
        with:
          name: promotion-records
          path: promotion-record-*.json
          retention-days: 90