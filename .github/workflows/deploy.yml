name: AI Square Deployment Pipeline

on:
  push:
    branches:
      - main
      - staging
  pull_request:
    branches:
      - main
      - staging
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        type: choice
        options:
          - staging
          - production

env:
  PROJECT_ID: ai-square-463013
  REGION: asia-east1
  
jobs:
  # ============================================
  # 1. Validation & Testing
  # ============================================
  validate:
    name: Validate & Test
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json
          
      - name: Install dependencies
        working-directory: frontend
        run: npm ci
        
      - name: Run TypeScript check
        working-directory: frontend
        run: npx tsc --noEmit
        
      - name: Run ESLint
        working-directory: frontend
        run: npm run lint
        
      - name: Run tests
        working-directory: frontend
        run: npm run test:ci
        
      - name: Build application
        working-directory: frontend
        run: npm run build

  # ============================================
  # 2. Security Scanning
  # ============================================
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: validate
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Run security audit
        working-directory: frontend
        run: npm audit --audit-level=high
        
      - name: Check for secrets
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: ${{ github.event.repository.default_branch }}
          head: HEAD

  # ============================================
  # 3. Deploy to Staging
  # ============================================
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [validate, security]
    if: github.ref == 'refs/heads/staging' || github.event.inputs.environment == 'staging'
    environment:
      name: staging
      url: https://ai-square-staging-731209836128.asia-east1.run.app
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          service_account_key: ${{ secrets.GCP_SA_KEY }}
          project_id: ${{ env.PROJECT_ID }}
          
      - name: Configure Docker
        run: gcloud auth configure-docker
        
      - name: Build and push image
        working-directory: frontend
        run: |
          IMAGE_TAG="${GITHUB_SHA::7}"
          IMAGE_URL="gcr.io/${{ env.PROJECT_ID }}/ai-square-staging:$IMAGE_TAG"
          
          docker build -t $IMAGE_URL .
          docker push $IMAGE_URL
          
      - name: Deploy to Cloud Run
        working-directory: frontend
        run: |
          gcloud run deploy ai-square-staging \
            --image gcr.io/${{ env.PROJECT_ID }}/ai-square-staging:${GITHUB_SHA::7} \
            --region ${{ env.REGION }} \
            --platform managed \
            --allow-unauthenticated \
            --set-env-vars="NODE_ENV=production,DB_HOST=${{ secrets.STAGING_DB_HOST }},DB_NAME=${{ secrets.STAGING_DB_NAME }},DB_USER=${{ secrets.STAGING_DB_USER }},DB_PASSWORD=${{ secrets.STAGING_DB_PASSWORD }}" \
            --add-cloudsql-instances=${{ env.PROJECT_ID }}:${{ env.REGION }}:ai-square-db-staging-asia \
            --service-account=ai-square-service@${{ env.PROJECT_ID }}.iam.gserviceaccount.com
            
      - name: Run post-deployment tests
        working-directory: frontend
        run: |
          chmod +x scripts/post-deployment-test.sh
          ./scripts/post-deployment-test.sh staging
          
      - name: Notify Slack
        if: always()
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          text: 'Staging deployment ${{ job.status }}'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}

  # ============================================
  # 4. Deploy to Production
  # ============================================
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [validate, security]
    if: github.ref == 'refs/heads/main' || github.event.inputs.environment == 'production'
    environment:
      name: production
      url: https://ai-square-frontend-731209836128.asia-east1.run.app
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          service_account_key: ${{ secrets.GCP_SA_KEY }}
          project_id: ${{ env.PROJECT_ID }}
          
      - name: Configure Docker
        run: gcloud auth configure-docker
        
      - name: Build and push image
        working-directory: frontend
        run: |
          IMAGE_TAG="${GITHUB_SHA::7}"
          IMAGE_URL="gcr.io/${{ env.PROJECT_ID }}/ai-square-frontend:$IMAGE_TAG"
          
          docker build -t $IMAGE_URL -f Dockerfile.production .
          docker push $IMAGE_URL
          
      - name: Deploy to Cloud Run
        working-directory: frontend
        run: |
          gcloud run deploy ai-square-frontend \
            --image gcr.io/${{ env.PROJECT_ID }}/ai-square-frontend:${GITHUB_SHA::7} \
            --region ${{ env.REGION }} \
            --platform managed \
            --allow-unauthenticated \
            --set-env-vars="NODE_ENV=production,DB_HOST=${{ secrets.PROD_DB_HOST }},DB_NAME=${{ secrets.PROD_DB_NAME }},DB_USER=${{ secrets.PROD_DB_USER }},DB_PASSWORD=${{ secrets.PROD_DB_PASSWORD }}" \
            --add-cloudsql-instances=${{ env.PROJECT_ID }}:${{ env.REGION }}:ai-square-db-production \
            --service-account=ai-square-service@${{ env.PROJECT_ID }}.iam.gserviceaccount.com
            
      - name: Run post-deployment tests
        working-directory: frontend
        run: |
          chmod +x scripts/post-deployment-test.sh
          ./scripts/post-deployment-test.sh production
          
      - name: Create deployment record
        if: success()
        run: |
          echo "Deployment completed at $(date)" >> deployment-log.txt
          echo "Version: ${GITHUB_SHA::7}" >> deployment-log.txt
          echo "Environment: production" >> deployment-log.txt
          
      - name: Notify Slack
        if: always()
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          text: 'Production deployment ${{ job.status }}'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
          
  # ============================================
  # 5. Monitoring & Alerts Setup
  # ============================================
  setup-monitoring:
    name: Setup Monitoring
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production]
    if: always()
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup monitoring alerts
        run: |
          echo "Setting up Cloud Monitoring alerts..."
          # Placeholder for actual monitoring setup
          # This would typically use gcloud monitoring commands
          
      - name: Verify deployment health
        run: |
          # Check both environments if deployed
          if [[ "${{ needs.deploy-staging.result }}" == "success" ]]; then
            curl -f https://ai-square-staging-731209836128.asia-east1.run.app/api/health
          fi
          
          if [[ "${{ needs.deploy-production.result }}" == "success" ]]; then
            curl -f https://ai-square-frontend-731209836128.asia-east1.run.app/api/health
          fi