name: Terraform CI/CD

on:
  pull_request:
    paths:
      - 'terraform/**'
      - '.github/workflows/terraform.yml'
  push:
    branches:
      - main
    paths:
      - 'terraform/**'
      - '.github/workflows/terraform.yml'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy'
        required: true
        type: choice
        options:
          - staging
          - production
      action:
        description: 'Action to perform'
        required: true
        type: choice
        options:
          - plan
          - apply
          - destroy

env:
  TF_VERSION: '1.5.0'
  GCP_PROJECT_ID: 'ai-square-463013'
  GCP_REGION: 'asia-east1'

jobs:
  security-check:
    name: Security Validation
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run security checks
        run: |
          cd terraform
          chmod +x security-check.sh
          ./security-check.sh

  terraform-plan:
    name: Terraform Plan
    runs-on: ubuntu-latest
    needs: security-check
    if: github.event_name == 'pull_request' || (github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'plan')
    
    strategy:
      matrix:
        environment: [staging, production]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Setup Cloud SDK
        uses: google-github-actions/setup-gcloud@v2

      - name: Terraform Init
        run: |
          cd terraform
          terraform init -backend-config="prefix=terraform/state/${{ matrix.environment }}"

      - name: Select Workspace
        run: |
          cd terraform
          terraform workspace select ${{ matrix.environment }} || terraform workspace new ${{ matrix.environment }}

      - name: Terraform Format Check
        run: |
          cd terraform
          terraform fmt -check -recursive

      - name: Terraform Validate
        run: |
          cd terraform
          terraform validate

      - name: Terraform Plan
        run: |
          cd terraform
          
          # Use appropriate password based on environment
          if [ "${{ matrix.environment }}" == "production" ]; then
            DB_PASSWORD="${{ secrets.PRODUCTION_DB_PASSWORD }}"
          else
            DB_PASSWORD="${{ secrets.STAGING_DB_PASSWORD }}"
          fi
          
          terraform plan \
            -var="environment=${{ matrix.environment }}" \
            -var="db_password=${DB_PASSWORD}" \
            -var="project_id=${{ env.GCP_PROJECT_ID }}" \
            -var="region=${{ env.GCP_REGION }}" \
            -out=tfplan-${{ matrix.environment }}

      - name: Save Plan
        uses: actions/upload-artifact@v4
        with:
          name: tfplan-${{ matrix.environment }}
          path: terraform/tfplan-${{ matrix.environment }}

      - name: Comment PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const output = `#### Terraform Plan for ${{ matrix.environment }} ðŸ“‹
            
            <details><summary>Show Plan</summary>
            
            \`\`\`terraform
            Plan output will be shown here
            \`\`\`
            
            </details>
            
            *Environment*: \`${{ matrix.environment }}\`
            *Action*: \`Plan\`
            *Workflow*: \`${{ github.workflow }}\`
            *Commit*: \`${{ github.sha }}\``;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            });

  terraform-apply-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: security-check
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment:
      name: staging
      url: https://ai-square-staging-731209836128.asia-east1.run.app
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Setup Cloud SDK
        uses: google-github-actions/setup-gcloud@v2

      - name: Terraform Init
        run: |
          cd terraform
          terraform init -backend-config="prefix=terraform/state/staging"

      - name: Select Workspace
        run: |
          cd terraform
          terraform workspace select staging || terraform workspace new staging

      - name: Terraform Apply
        run: |
          cd terraform
          terraform apply \
            -var="environment=staging" \
            -var="db_password=${{ secrets.STAGING_DB_PASSWORD }}" \
            -var="project_id=${{ env.GCP_PROJECT_ID }}" \
            -var="region=${{ env.GCP_REGION }}" \
            -auto-approve

      - name: Verify Deployment
        run: |
          STAGING_URL=$(cd terraform && terraform output -raw service_url)
          echo "Checking health at ${STAGING_URL}/api/health"
          curl -f ${STAGING_URL}/api/health || exit 1

  terraform-apply-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [security-check, terraform-apply-staging]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment:
      name: production
      url: https://ai-square-frontend-731209836128.asia-east1.run.app
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Setup Cloud SDK
        uses: google-github-actions/setup-gcloud@v2

      - name: Terraform Init
        run: |
          cd terraform
          terraform init -backend-config="prefix=terraform/state/production"

      - name: Select Workspace
        run: |
          cd terraform
          terraform workspace select production || terraform workspace new production

      - name: Terraform Apply
        run: |
          cd terraform
          terraform apply \
            -var="environment=production" \
            -var="db_password=${{ secrets.PRODUCTION_DB_PASSWORD }}" \
            -var="project_id=${{ env.GCP_PROJECT_ID }}" \
            -var="region=${{ env.GCP_REGION }}" \
            -auto-approve

      - name: Verify Deployment
        run: |
          PROD_URL=$(cd terraform && terraform output -raw service_url)
          echo "Checking health at ${PROD_URL}/api/health"
          curl -f ${PROD_URL}/api/health || exit 1

      - name: Run Smoke Tests
        run: |
          PROD_URL=$(cd terraform && terraform output -raw service_url)
          # Check main endpoints
          curl -f ${PROD_URL}/ || exit 1
          curl -f ${PROD_URL}/api/health || exit 1
          curl -f ${PROD_URL}/api/relations || exit 1

  terraform-manual-deploy:
    name: Manual Deployment
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'apply'
    environment:
      name: ${{ github.event.inputs.environment }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Setup Cloud SDK
        uses: google-github-actions/setup-gcloud@v2

      - name: Terraform Init
        run: |
          cd terraform
          terraform init -backend-config="prefix=terraform/state/${{ github.event.inputs.environment }}"

      - name: Select Workspace
        run: |
          cd terraform
          terraform workspace select ${{ github.event.inputs.environment }} || terraform workspace new ${{ github.event.inputs.environment }}

      - name: Set DB Password
        id: set-password
        run: |
          if [ "${{ github.event.inputs.environment }}" == "production" ]; then
            echo "db_password=${{ secrets.PRODUCTION_DB_PASSWORD }}" >> $GITHUB_OUTPUT
          else
            echo "db_password=${{ secrets.STAGING_DB_PASSWORD }}" >> $GITHUB_OUTPUT
          fi

      - name: Terraform Apply
        run: |
          cd terraform
          terraform apply \
            -var="environment=${{ github.event.inputs.environment }}" \
            -var="db_password=${{ steps.set-password.outputs.db_password }}" \
            -var="project_id=${{ env.GCP_PROJECT_ID }}" \
            -var="region=${{ env.GCP_REGION }}" \
            -auto-approve

      - name: Verify Deployment
        run: |
          SERVICE_URL=$(cd terraform && terraform output -raw service_url)
          echo "Checking health at ${SERVICE_URL}/api/health"
          curl -f ${SERVICE_URL}/api/health || exit 1