name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test-frontend:
    name: Frontend Tests
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [18.x, 20.x]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
    
    - name: Install dependencies
      working-directory: ./frontend
      run: npm ci
    
    - name: Run linting
      working-directory: ./frontend
      run: npm run lint
    
    - name: Run type checking
      working-directory: ./frontend
      run: npx tsc --noEmit
    
    - name: Run tests with coverage
      working-directory: ./frontend
      run: npm run test:ci
    
    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      if: matrix.node-version == '20.x'
      with:
        directory: ./frontend/coverage
        flags: frontend
        name: frontend-coverage
    
    - name: Build application
      working-directory: ./frontend
      run: npm run build

  test-backend:
    name: Backend Tests
    runs-on: ubuntu-latest
    if: false  # 暫時停用，因為後端還沒有測試
    
    strategy:
      matrix:
        python-version: [3.9, 3.11]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install dependencies
      working-directory: ./backend
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov ruff
    
    - name: Run linting with ruff
      working-directory: ./backend
      run: ruff check .
    
    - name: Run tests with coverage
      working-directory: ./backend
      run: pytest --cov=. --cov-report=xml
    
    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      if: matrix.python-version == '3.11'
      with:
        directory: ./backend
        flags: backend
        name: backend-coverage

  code-quality:
    name: Code Quality Checks
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Check for large files
      run: |
        find . -type f -size +1M | grep -v node_modules | grep -v .git | tee large_files.txt
        if [ -s large_files.txt ]; then
          echo "❌ Found large files (>1MB):"
          cat large_files.txt
          exit 1
        else
          echo "✅ No large files found"
        fi
    
    - name: Check for secrets
      uses: trufflesecurity/trufflehog@main
      with:
        path: ./
        base: main
        head: HEAD
    
    - name: Check commit messages
      if: github.event_name == 'pull_request'
      run: |
        # 檢查是否使用 conventional commits
        git log --format='%s' origin/main..HEAD | while read commit_msg; do
          if ! echo "$commit_msg" | grep -qE '^(feat|fix|docs|style|refactor|test|chore|perf|build|ci)(\(.+\))?: .+'; then
            echo "❌ Invalid commit message: $commit_msg"
            echo "Please use conventional commit format: type(scope): description"
            exit 1
          fi
        done
        echo "✅ All commit messages follow conventional format"

  security-scan:
    name: Security Scanning
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Run npm audit
      working-directory: ./frontend
      run: |
        npm audit --production
        # Allow info/low vulnerabilities but fail on moderate/high/critical
        npm audit --production --audit-level=moderate || true

  deploy-check:
    name: Deployment Readiness
    runs-on: ubuntu-latest
    needs: [test-frontend, code-quality]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Check CHANGELOG
      run: |
        if ! grep -q "## \[Unreleased\]" docs/CHANGELOG.md; then
          echo "❌ CHANGELOG.md missing [Unreleased] section"
          exit 1
        fi
        echo "✅ CHANGELOG.md is properly formatted"
    
    - name: Check documentation
      run: |
        required_docs=(
          "README.md"
          "docs/PLAYBOOK.md"
          "CLAUDE.md"
        )
        
        for doc in "${required_docs[@]}"; do
          if [ ! -f "$doc" ]; then
            echo "❌ Missing required documentation: $doc"
            exit 1
          fi
        done
        echo "✅ All required documentation present"

  # 可選：自動部署到 staging
  # deploy-staging:
  #   name: Deploy to Staging
  #   runs-on: ubuntu-latest
  #   needs: [deploy-check]
  #   if: github.ref == 'refs/heads/main'
  #   
  #   steps:
  #   - uses: actions/checkout@v4
  #   
  #   - name: Deploy to Google Cloud Run
  #     env:
  #       GCP_PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  #       GCP_SA_KEY: ${{ secrets.GCP_SA_KEY }}
  #     run: |
  #       # 部署腳本
  #       echo "Deploying to staging..."